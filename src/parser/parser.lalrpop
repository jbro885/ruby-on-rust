use std::str::FromStr;
use parser::ast::*;

grammar;

pub Expr: Box<Expr> = {
    ExprAssignment,
};

ExprAssignment: Box<Expr> = {
    ExprPlusMinus,
    <i:Identifier> "=" <r:ExprPlusMinus> => Box::new(Expr::Assignment(i, r))
};

ExprPlusMinus: Box<Expr> = {
    ExprMulDiv,
    <l:ExprAtom> "+" <r:ExprPlusMinus> => Box::new(Expr::Binary(l, Operator::Add, r)),
    <l:ExprAtom> "-" <r:ExprPlusMinus> => Box::new(Expr::Binary(l, Operator::Sub, r)),
};

ExprMulDiv: Box<Expr> = {
    ExprAtom,
    <l:ExprAtom> "*" <r:ExprPlusMinus> => Box::new(Expr::Binary(l, Operator::Mul, r)),
    <l:ExprAtom> "/" <r:ExprPlusMinus> => Box::new(Expr::Binary(l, Operator::Div, r)),
};

ExprAtom: Box<Expr> = {
    "(" <Expr> ")",
    Identifier => Box::new(Expr::Identifier(<>)),
    Number => Box::new(Expr::Number(<>)),
};

Identifier: String = {
    r"[a-zA-Z]\w*" => String::from(<>)
};

Number: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};
