use std::str::FromStr;
use parser::ast::*;

// use token::Token;

grammar;

// TODO multiple stmts
// REF in rustypop:
// stmts: () = {
//   stmt,
//   stmts stmt,
// };
// stmt: () = {
//   Let,
//   StmtItem,
//   "pub" StmtItem,
//   OuterAttrs StmtItem,
//   OuterAttrs "pub" StmtItem,
//   ExprStmtLike,
//   block,
//   ExprNoStmtLike ";",
//   ";",
// };

pub Stmt: Box<Stmt> = {
    ClassDefinition => Box::new(Stmt::ClassDefinition(*<>)),
    Expr => Box::new(Stmt::Expr(*<>))
};

// TODO
// - identifier const
// - keyword class and end, as extern tokens
// - grammer for consts defs and method defs
// - inline version
ClassDefinition: Box<ClassDefinition> = {
    "class" <i:IdConst> "end" => Box::new(ClassDefinition { class_name: (String::from(i)) }),
};

Expr: Box<Expr> = {
    ExprAssignment,
};

ExprAssignment: Box<Expr> = {
    ExprAddSub,
    <i:Identifier> "=" <r:ExprAddSub> => Box::new(Expr::Assignment(i, r))
};

ExprAddSub: Box<Expr> = {
    ExprMulDiv,
    <l:ExprAtom> "+" <r:ExprAddSub> => Box::new(Expr::Binary(l, Operator::Add, r)),
    <l:ExprAtom> "-" <r:ExprAddSub> => Box::new(Expr::Binary(l, Operator::Sub, r)),
};

ExprMulDiv: Box<Expr> = {
    ExprAtom,
    <l:ExprAtom> "*" <r:ExprAddSub> => Box::new(Expr::Binary(l, Operator::Mul, r)),
    <l:ExprAtom> "/" <r:ExprAddSub> => Box::new(Expr::Binary(l, Operator::Div, r)),
};

ExprAtom: Box<Expr> = {
    "(" <Expr> ")",
    Identifier => Box::new(Expr::Identifier(<>)),
    Number => Box::new(Expr::Number(<>)),
};

Identifier: String = {
    // TODO
    // IdGlobalVar,
    // IdInstanceVar,
    // IdClassVar,
    IdLocalVar,
    IdConst
};

// TODO
// IdGlobalVar: String = { r"" => String::from(<>) };
// IdInstanceVar: String = { r"" => String::from(<>) };
// IdClassVar: String = { r"" => String::from(<>) };
IdLocalVar: String = { r"[a-z_]\w*" => String::from(<>) };
IdConst: String = { r"[A-Z]\w*" => String::from(<>) };

Number: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
};

// extern {
//     enum Token {
//         "(" => Token::ParenOpen,
//         ")" => Token::ParenClose,

//         "=" => Token::Equals,
//         "+" => Token::Plus,
//         "-" => Token::Dash,
//         "*" => Token::Star,
//         "/" => Token::Slash,

//         "class" => Token::KWClass,
//         "end" => Token::KWEnd
//     }
// }
