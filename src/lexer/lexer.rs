use std::rc::Rc;
use std::cell::RefCell;
use crate::{
	token::token::Token,
	lexer::{
		literal::Literal,
		stack_state::StackState,
		dedenter::Dedenter,
	},
	explainer
};

macro_rules! wip { () => { panic!("WIP"); }; }

macro_rules! explain {
	( $ ( $ arg : tt ) * ) => {
		let message = format!( $($arg)* );
		explainer::explain("lexer", message);
	};
}

// TODO VENDOR using a static str as return value will cause ragel to run forever.
// https://github.com/ruby-on-rust/ruby-on-rust/issues/3
fn state_name_from_id(state_id: i32) -> String {
	if state_id == lexer_en_interp_words { return String::from("interp_words"); }
	if state_id == lexer_en_interp_string { return String::from("interp_string"); }
	if state_id == lexer_en_plain_words { return String::from("plain_words"); }
	if state_id == lexer_en_plain_string { return String::from("plain_string"); }
	if state_id == lexer_en_interp_backslash_delimited { return String::from("interp_backslash_delimited"); }
	if state_id == lexer_en_plain_backslash_delimited { return String::from("plain_backslash_delimited"); }
	if state_id == lexer_en_interp_backslash_delimited_words { return String::from("interp_backslash_delimited_words"); }
	if state_id == lexer_en_plain_backslash_delimited_words { return String::from("plain_backslash_delimited_words"); }
	if state_id == lexer_en_regexp_modifiers { return String::from("regexp_modifiers"); }
	if state_id == lexer_en_expr_variable { return String::from("expr_variable"); }
	if state_id == lexer_en_expr_fname { return String::from("expr_fname"); }
	if state_id == lexer_en_expr_endfn { return String::from("expr_endfn"); }
	if state_id == lexer_en_expr_dot { return String::from("expr_dot"); }
	if state_id == lexer_en_expr_arg { return String::from("expr_arg"); }
	if state_id == lexer_en_expr_cmdarg { return String::from("expr_cmdarg"); }
	if state_id == lexer_en_expr_endarg { return String::from("expr_endarg"); }
	if state_id == lexer_en_expr_mid { return String::from("expr_mid"); }
	if state_id == lexer_en_expr_beg { return String::from("expr_beg"); }
	if state_id == lexer_en_expr_labelarg { return String::from("expr_labelarg"); }
	if state_id == lexer_en_expr_value { return String::from("expr_value"); }
	if state_id == lexer_en_expr_end { return String::from("expr_end"); }
	if state_id == lexer_en_leading_dot { return String::from("leading_dot"); }
	if state_id == lexer_en_line_begin { return String::from("line_begin"); }
	unreachable!();
}

fn state_id_from_name(state_name: &str) -> i32 {
	match state_name {
		"interp_words" => { lexer_en_interp_words },
		"interp_string" => { lexer_en_interp_string },
		"plain_words" => { lexer_en_plain_words },
		"plain_string" => { lexer_en_plain_string },
		"interp_backslash_delimited" => { lexer_en_interp_backslash_delimited },
		"plain_backslash_delimited" => { lexer_en_plain_backslash_delimited },
		"interp_backslash_delimited_words" => { lexer_en_interp_backslash_delimited_words },
		"plain_backslash_delimited_words" => { lexer_en_plain_backslash_delimited_words },
		"regexp_modifiers" => { lexer_en_regexp_modifiers },
		"expr_variable" => { lexer_en_expr_variable },
		"expr_fname" => { lexer_en_expr_fname },
		"expr_endfn" => { lexer_en_expr_endfn },
		"expr_dot" => { lexer_en_expr_dot },
		"expr_arg" => { lexer_en_expr_arg },
		"expr_cmdarg" => { lexer_en_expr_cmdarg },
		"expr_endarg" => { lexer_en_expr_endarg },
		"expr_mid" => { lexer_en_expr_mid },
		"expr_beg" => { lexer_en_expr_beg },
		"expr_labelarg" => { lexer_en_expr_labelarg },
		"expr_value" => { lexer_en_expr_value },
		"expr_end" => { lexer_en_expr_end },
		"leading_dot" => { lexer_en_leading_dot },
		"line_begin" => { lexer_en_line_begin },
		_ => { unreachable!(); }
	}
}

static _lexer_actions: [i16 ; 1103] = [ 0, 1, 0, 1, 24, 1, 25, 1, 28, 1, 29, 1, 30, 1, 42, 1, 43, 1, 44, 1, 45, 1, 47, 1, 48, 1, 49, 1, 50, 1, 51, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56, 1, 57, 1, 58, 1, 59, 1, 60, 1, 61, 1, 62, 1, 63, 1, 65, 1, 66, 1, 67, 1, 68, 1, 69, 1, 70, 1, 71, 1, 72, 1, 73, 1, 75, 1, 76, 1, 77, 1, 79, 1, 80, 1, 81, 1, 82, 1, 85, 1, 86, 1, 87, 1, 88, 1, 89, 1, 90, 1, 91, 1, 92, 1, 93, 1, 94, 1, 95, 1, 96, 1, 97, 1, 98, 1, 99, 1, 100, 1, 101, 1, 102, 1, 103, 1, 104, 1, 105, 1, 106, 1, 107, 1, 108, 1, 109, 1, 110, 1, 111, 1, 112, 1, 113, 1, 117, 1, 118, 1, 119, 1, 120, 1, 121, 1, 122, 1, 123, 1, 124, 1, 125, 1, 126, 1, 127, 1, 128, 1, 129, 1, 130, 1, 131, 1, 132, 1, 133, 1, 134, 1, 135, 1, 136, 1, 137, 1, 138, 1, 139, 1, 140, 1, 141, 1, 142, 1, 143, 1, 144, 1, 145, 1, 146, 1, 148, 1, 149, 1, 150, 1, 155, 1, 156, 1, 157, 1, 158, 1, 159, 1, 160, 1, 161, 1, 162, 1, 167, 1, 168, 1, 169, 1, 170, 1, 171, 1, 174, 1, 175, 1, 176, 1, 177, 1, 180, 1, 181, 1, 183, 1, 184, 1, 185, 1, 186, 1, 187, 1, 188, 1, 190, 1, 191, 1, 194, 1, 195, 1, 196, 1, 197, 1, 199, 1, 200, 1, 207, 1, 208, 1, 209, 1, 210, 1, 211, 1, 212, 1, 213, 1, 214, 1, 215, 1, 216, 1, 217, 1, 218, 1, 219, 1, 220, 1, 221, 1, 222, 1, 223, 1, 224, 1, 227, 1, 228, 1, 229, 1, 233, 1, 235, 1, 236, 1, 237, 1, 238, 1, 239, 1, 240, 1, 241, 1, 242, 1, 243, 1, 244, 1, 245, 1, 247, 1, 248, 1, 249, 1, 250, 1, 251, 1, 252, 1, 254, 1, 255, 1, 269, 1, 270, 1, 271, 1, 272, 1, 273, 1, 274, 1, 275, 1, 276, 1, 277, 1, 278, 1, 279, 1, 280, 1, 281, 1, 282, 1, 284, 1, 285, 1, 286, 1, 288, 1, 290, 1, 291, 1, 292, 1, 294, 1, 295, 1, 296, 1, 299, 1, 300, 1, 302, 1, 303, 1, 304, 1, 305, 1, 306, 1, 307, 1, 308, 1, 309, 1, 310, 1, 311, 1, 312, 1, 313, 1, 314, 1, 315, 1, 316, 1, 317, 2, 0, 29, 2, 0, 61, 2, 0, 71, 2, 0, 79, 2, 0, 85, 2, 0, 90, 2, 0, 95, 2, 0, 99, 2, 0, 105, 2, 0, 155, 2, 0, 159, 2, 0, 160, 2, 0, 310, 2, 0, 311, 2, 2, 287, 2, 3, 287, 2, 4, 287, 2, 5, 287, 2, 6, 287, 2, 7, 287, 2, 8, 64, 2, 8, 74, 2, 9, 64, 2, 9, 74, 2, 10, 64, 2, 10, 74, 2, 14, 64, 2, 14, 74, 2, 16, 64, 2, 16, 74, 2, 17, 64, 2, 17, 74, 2, 18, 64, 2, 18, 74, 2, 19, 64, 2, 19, 74, 2, 20, 64, 2, 20, 74, 2, 21, 64, 2, 21, 74, 2, 22, 64, 2, 22, 74, 2, 23, 64, 2, 23, 74, 2, 24, 78, 2, 24, 84, 2, 25, 0, 2, 25, 42, 2, 25, 43, 2, 25, 44, 2, 25, 131, 2, 25, 139, 2, 25, 149, 2, 25, 160, 2, 25, 171, 2, 25, 173, 2, 25, 190, 2, 25, 197, 2, 25, 198, 2, 25, 207, 2, 25, 218, 2, 25, 236, 2, 25, 245, 2, 25, 246, 2, 25, 252, 2, 25, 253, 2, 25, 300, 2, 25, 301, 2, 25, 314, 2, 26, 166, 2, 26, 189, 2, 26, 230, 2, 26, 283, 2, 27, 297, 2, 28, 29, 2, 29, 0, 2, 29, 131, 2, 29, 139, 2, 29, 149, 2, 29, 172, 2, 29, 190, 2, 29, 197, 2, 29, 236, 2, 29, 245, 2, 29, 252, 2, 29, 300, 2, 29, 314, 2, 30, 147, 2, 30, 226, 2, 30, 234, 2, 30, 305, 2, 31, 147, 2, 31, 226, 2, 31, 234, 2, 31, 293, 2, 32, 226, 2, 32, 234, 2, 33, 226, 2, 33, 234, 2, 34, 226, 2, 34, 234, 2, 35, 226, 2, 35, 234, 2, 36, 226, 2, 36, 234, 2, 37, 226, 2, 38, 289, 2, 39, 165, 2, 39, 231, 2, 39, 298, 2, 40, 163, 2, 40, 164, 2, 40, 182, 2, 40, 232, 2, 40, 296, 2, 41, 297, 2, 45, 0, 2, 46, 225, 2, 48, 54, 2, 49, 54, 2, 50, 54, 2, 51, 54, 2, 52, 54, 2, 53, 54, 2, 55, 306, 2, 58, 0, 2, 58, 114, 2, 58, 115, 2, 58, 116, 2, 58, 151, 2, 58, 152, 2, 58, 153, 2, 58, 154, 2, 58, 178, 2, 58, 179, 2, 58, 192, 2, 58, 193, 2, 58, 202, 2, 58, 203, 2, 58, 204, 2, 58, 205, 2, 58, 206, 2, 58, 256, 2, 58, 257, 2, 58, 259, 2, 58, 260, 2, 58, 261, 2, 58, 262, 2, 58, 263, 2, 58, 264, 2, 58, 265, 2, 58, 266, 2, 58, 267, 2, 58, 268, 3, 0, 83, 24, 3, 9, 11, 64, 3, 9, 11, 74, 3, 9, 12, 64, 3, 9, 12, 74, 3, 13, 12, 64, 3, 13, 12, 74, 3, 14, 12, 64, 3, 14, 12, 74, 3, 15, 11, 64, 3, 15, 11, 74, 3, 21, 22, 64, 3, 21, 22, 74, 3, 24, 23, 64, 3, 24, 23, 74, 3, 28, 29, 0, 3, 28, 29, 131, 3, 28, 29, 139, 3, 28, 29, 149, 3, 28, 29, 172, 3, 28, 29, 190, 3, 28, 29, 197, 3, 28, 29, 236, 3, 28, 29, 245, 3, 28, 29, 252, 3, 28, 29, 300, 3, 28, 29, 314, 3, 54, 1, 287, 3, 58, 0, 154, 3, 58, 25, 153, 3, 58, 25, 179, 3, 58, 29, 201, 3, 58, 29, 258, 3, 58, 43, 152, 4, 9, 11, 12, 64, 4, 9, 11, 12, 74, 4, 15, 11, 12, 64, 4, 15, 11, 12, 74, 4, 48, 54, 1, 287, 4, 49, 54, 1, 287, 4, 50, 54, 1, 287, 4, 51, 54, 1, 287, 4, 52, 54, 1, 287, 4, 53, 54, 1, 287, 4, 58, 25, 43, 152, 4, 58, 28, 29, 201, 0 , 0 ];
static _lexer_key_offsets: [i16 ; 838] = [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 35, 44, 54, 63, 67, 72, 76, 81, 85, 88, 92, 99, 102, 104, 105, 110, 115, 124, 146, 155, 165, 174, 178, 183, 187, 192, 196, 199, 203, 210, 213, 215, 216, 221, 226, 235, 257, 266, 276, 285, 307, 316, 326, 335, 357, 366, 376, 385, 394, 397, 398, 399, 411, 412, 413, 425, 426, 427, 463, 499, 512, 525, 538, 551, 564, 577, 590, 604, 617, 630, 643, 656, 669, 682, 695, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 737, 738, 739, 755, 762, 763, 771, 779, 787, 795, 803, 804, 826, 835, 838, 846, 853, 854, 866, 867, 868, 869, 870, 879, 889, 890, 897, 898, 911, 925, 939, 953, 967, 973, 974, 980, 981, 982, 994, 1003, 1004, 1005, 1006, 1015, 1016, 1023, 1030, 1037, 1044, 1051, 1058, 1059, 1060, 1066, 1067, 1078, 1082, 1082, 1083, 1084, 1085, 1089, 1090, 1091, 1100, 1104, 1107, 1109, 1118, 1128, 1128, 1128, 1130, 1132, 1132, 1132, 1137, 1137, 1137, 1137, 1142, 1143, 1143, 1143, 1143, 1148, 1152, 1157, 1161, 1161, 1161, 1165, 1169, 1170, 1175, 1182, 1188, 1194, 1200, 1200, 1212, 1212, 1224, 1230, 1230, 1242, 1254, 1266, 1278, 1278, 1290, 1302, 1314, 1326, 1338, 1350, 1350, 1350, 1356, 1356, 1362, 1365, 1367, 1376, 1386, 1386, 1386, 1388, 1390, 1390, 1390, 1395, 1395, 1395, 1395, 1400, 1401, 1401, 1401, 1401, 1406, 1410, 1415, 1419, 1419, 1419, 1423, 1427, 1428, 1433, 1440, 1446, 1452, 1458, 1458, 1470, 1470, 1482, 1488, 1488, 1500, 1512, 1524, 1536, 1536, 1548, 1560, 1572, 1584, 1596, 1608, 1608, 1608, 1614, 1614, 1622, 1626, 1629, 1634, 1638, 1643, 1646, 1648, 1657, 1661, 1669, 1673, 1676, 1678, 1687, 1694, 1698, 1702, 1706, 1708, 1710, 1719, 1728, 1737, 1791, 1795, 1795, 1798, 1799, 1800, 1822, 1824, 1833, 1834, 1835, 1836, 1837, 1838, 1840, 1841, 1844, 1845, 1847, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1938, 1939, 1951, 1963, 1978, 1991, 2004, 2017, 2030, 2043, 2056, 2069, 2081, 2093, 2106, 2119, 2132, 2145, 2158, 2172, 2185, 2198, 2211, 2224, 2238, 2251, 2264, 2277, 2290, 2303, 2316, 2330, 2343, 2356, 2369, 2382, 2396, 2409, 2422, 2435, 2448, 2461, 2473, 2487, 2500, 2514, 2527, 2541, 2554, 2567, 2581, 2594, 2607, 2621, 2634, 2647, 2660, 2673, 2688, 2701, 2714, 2727, 2740, 2755, 2768, 2781, 2794, 2808, 2821, 2834, 2848, 2861, 2874, 2887, 2901, 2914, 2927, 2942, 2955, 2968, 2981, 2994, 3008, 3021, 3034, 3047, 3048, 3066, 3070, 3071, 3072, 3084, 3085, 3085, 3118, 3122, 3122, 3125, 3126, 3127, 3128, 3129, 3130, 3132, 3133, 3136, 3137, 3139, 3150, 3151, 3151, 3152, 3153, 3164, 3165, 3198, 3234, 3242, 3249, 3254, 3254, 3260, 3266, 3267, 3268, 3269, 3273, 3273, 3285, 3285, 3291, 3291, 3292, 3293, 3293, 3299, 3300, 3301, 3302, 3306, 3307, 3343, 3344, 3345, 3346, 3347, 3365, 3381, 3381, 3393, 3406, 3407, 3418, 3422, 3423, 3424, 3425, 3425, 3426, 3426, 3448, 3452, 3452, 3453, 3454, 3463, 3464, 3464, 3474, 3484, 3494, 3504, 3514, 3524, 3534, 3545, 3555, 3565, 3575, 3585, 3595, 3605, 3615, 3625, 3682, 3686, 3686, 3688, 3689, 3690, 3694, 3701, 3703, 3703, 3705, 3706, 3715, 3723, 3733, 3734, 3735, 3738, 3764, 3767, 3769, 3778, 3779, 3780, 3781, 3783, 3784, 3785, 3787, 3799, 3800, 3800, 3803, 3805, 3805, 3805, 3805, 3805, 3806, 3807, 3809, 3809, 3810, 3813, 3815, 3823, 3832, 3845, 3847, 3847, 3850, 3851, 3851, 3851, 3851, 3865, 3879, 3879, 3880, 3900, 3920, 3943, 3964, 3985, 4006, 4027, 4048, 4069, 4090, 4110, 4130, 4143, 4164, 4185, 4206, 4227, 4248, 4270, 4291, 4312, 4333, 4354, 4376, 4397, 4418, 4439, 4460, 4481, 4502, 4524, 4545, 4566, 4587, 4608, 4630, 4651, 4673, 4694, 4716, 4738, 4759, 4780, 4802, 4823, 4844, 4866, 4887, 4908, 4929, 4950, 4973, 4994, 5015, 5036, 5057, 5080, 5101, 5122, 5143, 5164, 5186, 5207, 5228, 5250, 5271, 5292, 5313, 5335, 5356, 5377, 5398, 5421, 5442, 5463, 5484, 5505, 5526, 5547, 5568, 5590, 5611, 5632, 5653, 5674, 5674, 5676, 5685, 5689, 5689, 5690, 5691, 5692, 5692, 5712, 5716, 5716, 5717, 5718, 5730, 5731, 5731, 5798, 5802, 5802, 5804, 5805, 5806, 5828, 5830, 5839, 5840, 5843, 5843, 5843, 5845, 5847, 5848, 5849, 5862, 5867, 5872, 5877, 5882, 5884, 5885, 5885, 5887, 5888, 5888, 5888, 5893, 5898, 5903, 5908, 5913, 5922, 5931, 5940, 5945, 5950, 5951, 5953, 5954, 5957, 5958, 5960, 5970, 5982, 5983, 5983, 5983, 5996, 6009, 6022, 6035, 6048, 6061, 6061, 6062, 6062, 6073, 6084, 6098, 6110, 6122, 6134, 6146, 6158, 6170, 6182, 6193, 6204, 6216, 6228, 6240, 6252, 6264, 6277, 6289, 6301, 6313, 6325, 6338, 6350, 6362, 6374, 6386, 6398, 6410, 6423, 6435, 6447, 6459, 6471, 6483, 6503, 6510, 6523, 6535, 6547, 6559, 6571, 6583, 6594, 6607, 6619, 6632, 6644, 6657, 6669, 6681, 6694, 6706, 6718, 6730, 6742, 6755, 6767, 6779, 6791, 6803, 6817, 6829, 6841, 6853, 6865, 6877, 6891, 6903, 6915, 6927, 6939, 6952, 6964, 6976, 6988, 7001, 7013, 7025, 7037, 7049, 7061, 7074, 7086, 7098, 7110, 7124, 7136, 7148, 7160, 7172, 7184, 7196, 7208, 7220, 7233, 7245, 7257, 7269, 7281, 7293, 7305, 7305, 7307, 7307, 7313, 7319, 0 , 0 ];
static _lexer_trans_keys: [u8 ; 7322] = [ 101, 103, 105, 110, 69, 78, 68, 95, 95, 0, 4, 10, 26, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 45, 0, 4, 10, 26, 77, 0, 4, 26, 77, 0, 4, 26, 63, 92, 0, 4, 10, 26, 0, 4, 26, 0, 4, 26, 45, 0, 4, 10, 26, 67, 92, 99, 0, 4, 26, 67, 99, 45, 0, 4, 26, 63, 92, 0, 4, 10, 26, 77, 0, 4, 26, 48, 57, 65, 70, 97, 102, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 45, 0, 4, 10, 26, 77, 0, 4, 26, 77, 0, 4, 26, 63, 92, 0, 4, 10, 26, 0, 4, 26, 0, 4, 26, 45, 0, 4, 10, 26, 67, 92, 99, 0, 4, 26, 67, 99, 45, 0, 4, 26, 63, 92, 0, 4, 10, 26, 77, 0, 4, 26, 48, 57, 65, 70, 97, 102, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 58, 58, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 60, 62, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 10, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 33, 58, 63, 96, 102, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 99, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 117, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 110, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 108, 116, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 101, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 115, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 104, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 105, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 108, 0, 47, 59, 64, 91, 94, 123, 127, 115, 99, 117, 101, 108, 116, 101, 115, 115, 105, 108, 105, 108, 9, 32, 40, 92, 96, 100, 0, 10, 11, 13, 14, 64, 91, 94, 123, 127, 58, 10, 9, 32, 40, 92, 96, 100, 0, 10, 11, 13, 14, 64, 91, 94, 123, 127, 0, 4, 26, 65, 90, 97, 122, 61, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 62, 126, 64, 96, 0, 63, 91, 94, 123, 127, 96, 0, 64, 91, 94, 123, 127, 93, 34, 39, 45, 61, 96, 126, 0, 64, 91, 94, 123, 127, 34, 10, 10, 39, 34, 39, 96, 0, 64, 91, 94, 123, 127, 10, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 96, 0, 64, 91, 94, 123, 127, 58, 33, 58, 61, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 71, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 68, 96, 0, 47, 59, 64, 91, 94, 123, 127, 9, 32, 40, 92, 11, 13, 10, 9, 32, 40, 92, 11, 13, 58, 58, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 99, 117, 101, 96, 0, 47, 58, 64, 91, 94, 123, 127, 58, 10, 32, 35, 60, 92, 9, 13, 10, 32, 35, 60, 92, 9, 13, 10, 32, 35, 60, 92, 9, 13, 10, 32, 35, 60, 92, 9, 13, 10, 32, 35, 60, 92, 9, 13, 10, 32, 35, 60, 92, 9, 13, 60, 10, 9, 32, 38, 46, 11, 13, 46, 0, 4, 10, 26, 32, 35, 61, 92, 95, 9, 13, 9, 32, 11, 13, 10, 10, 98, 10, 32, 9, 13, 10, 95, 0, 4, 10, 26, 32, 35, 92, 9, 13, 9, 32, 11, 13, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 67, 77, 99, 117, 120, 48, 55, 48, 55, 48, 55, 0, 4, 26, 63, 92, 0, 4, 26, 63, 92, 45, 0, 4, 26, 63, 92, 0, 4, 26, 45, 0, 4, 26, 63, 92, 0, 4, 26, 92, 0, 4, 26, 92, 0, 4, 26, 45, 10, 0, 4, 26, 63, 92, 123, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 10, 26, 35, 92, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 26, 67, 77, 99, 117, 120, 48, 55, 48, 55, 48, 55, 0, 4, 26, 63, 92, 0, 4, 26, 63, 92, 45, 0, 4, 26, 63, 92, 0, 4, 26, 45, 0, 4, 26, 63, 92, 0, 4, 26, 92, 0, 4, 26, 92, 0, 4, 26, 45, 10, 0, 4, 26, 63, 92, 123, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 0, 4, 9, 26, 32, 125, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 0, 4, 10, 26, 32, 92, 9, 13, 9, 32, 11, 13, 0, 4, 26, 0, 4, 10, 26, 92, 0, 4, 10, 26, 0, 4, 10, 26, 35, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 0, 4, 10, 26, 32, 35, 9, 13, 9, 32, 11, 13, 36, 64, 123, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 32, 9, 13, 9, 32, 11, 13, 65, 90, 97, 122, 65, 90, 97, 122, 36, 64, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 96, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 32, 33, 35, 36, 37, 38, 42, 43, 45, 47, 58, 60, 61, 62, 66, 69, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 105, 109, 110, 111, 114, 115, 116, 117, 119, 121, 124, 126, 1, 8, 9, 13, 14, 64, 65, 90, 94, 96, 123, 127, 9, 32, 11, 13, 61, 64, 126, 10, 10, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 115, 38, 42, 64, 58, 60, 61, 62, 61, 62, 126, 61, 61, 62, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 69, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 71, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 68, 96, 0, 47, 58, 64, 91, 94, 123, 127, 93, 10, 33, 61, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 69, 70, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 67, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 79, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 68, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 71, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 61, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 69, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 103, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 107, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 97, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 102, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 105, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 120, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 115, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 99, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 121, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 112, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 104, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 100, 108, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 104, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 61, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 124, 0, 4, 9, 26, 32, 35, 92, 96, 1, 10, 11, 13, 14, 64, 91, 94, 123, 127, 9, 32, 11, 13, 10, 10, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 0, 4, 10, 26, 32, 33, 35, 37, 38, 42, 43, 45, 47, 60, 61, 62, 91, 92, 93, 94, 96, 124, 126, 1, 8, 9, 13, 14, 64, 65, 90, 123, 127, 9, 32, 11, 13, 61, 64, 126, 10, 10, 38, 42, 64, 60, 61, 62, 61, 62, 126, 61, 61, 62, 33, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 93, 10, 33, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 124, 0, 4, 10, 26, 32, 35, 37, 38, 40, 42, 44, 45, 46, 58, 60, 61, 62, 63, 92, 94, 105, 114, 117, 119, 123, 124, 126, 9, 13, 43, 47, 91, 93, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 0, 4, 10, 26, 32, 61, 9, 13, 10, 32, 38, 46, 61, 9, 13, 10, 32, 61, 9, 13, 10, 32, 42, 61, 9, 13, 10, 32, 9, 13, 61, 62, 46, 46, 58, 10, 32, 9, 13, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 32, 61, 124, 9, 13, 10, 10, 10, 32, 42, 61, 9, 13, 58, 60, 62, 10, 32, 9, 13, 10, 9, 32, 37, 38, 40, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 92, 93, 94, 96, 105, 114, 117, 119, 123, 124, 126, 0, 10, 11, 13, 14, 64, 125, 127, 102, 101, 110, 104, 0, 4, 9, 26, 32, 92, 96, 100, 1, 10, 11, 13, 14, 64, 91, 94, 123, 127, 9, 32, 40, 92, 96, 100, 0, 10, 11, 13, 14, 64, 91, 94, 123, 127, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 96, 111, 0, 47, 59, 64, 91, 94, 123, 127, 10, 0, 4, 9, 26, 32, 35, 92, 100, 123, 11, 13, 9, 32, 11, 13, 10, 10, 10, 111, 0, 4, 10, 26, 32, 35, 92, 96, 105, 114, 117, 119, 1, 8, 9, 13, 14, 64, 91, 94, 123, 127, 9, 32, 11, 13, 10, 10, 96, 0, 47, 58, 64, 91, 94, 123, 127, 10, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 99, 0, 47, 58, 64, 91, 94, 123, 127, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 116, 0, 47, 58, 64, 91, 94, 123, 127, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 96, 104, 0, 47, 58, 64, 91, 94, 123, 127, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 0, 4, 10, 26, 32, 33, 35, 37, 38, 40, 42, 43, 45, 46, 47, 58, 60, 61, 62, 63, 66, 69, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 109, 110, 111, 114, 115, 116, 117, 119, 121, 123, 124, 126, 1, 8, 9, 13, 14, 64, 65, 90, 93, 96, 125, 127, 9, 32, 11, 13, 61, 126, 10, 10, 65, 90, 97, 122, 0, 4, 26, 65, 90, 97, 122, 38, 61, 42, 61, 61, 10, 32, 35, 61, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 10, 32, 35, 92, 9, 13, 48, 57, 61, 62, 46, 46, 0, 4, 26, 33, 34, 36, 37, 38, 39, 42, 43, 45, 47, 58, 60, 61, 62, 64, 91, 94, 96, 124, 126, 0, 63, 92, 93, 123, 127, 61, 64, 126, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 38, 42, 64, 60, 61, 62, 61, 61, 62, 33, 61, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 61, 62, 126, 61, 62, 124, 64, 60, 61, 62, 61, 62, 126, 61, 62, 0, 4, 26, 95, 65, 90, 97, 122, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 58, 61, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 58, 61, 61, 62, 126, 61, 33, 58, 61, 63, 69, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 61, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 9, 32, 33, 58, 61, 63, 92, 95, 0, 10, 11, 13, 14, 47, 59, 64, 91, 96, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 69, 70, 76, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 78, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 67, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 79, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 68, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 73, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 78, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 71, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 95, 0, 10, 11, 13, 14, 47, 59, 64, 91, 96, 123, 127, 9, 32, 33, 58, 61, 63, 92, 95, 0, 10, 11, 13, 14, 47, 59, 64, 91, 96, 123, 127, 33, 58, 61, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 73, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 76, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 69, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 73, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 78, 92, 96, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 110, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 105, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 97, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 100, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 114, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 103, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 105, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 110, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 97, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 107, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 97, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 97, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 111, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 102, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 110, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 105, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 100, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 117, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 114, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 97, 111, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 114, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 102, 110, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 111, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 100, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 117, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 105, 111, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 120, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 116, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 100, 115, 116, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 111, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 99, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 117, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 114, 117, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 121, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 114, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 117, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 112, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 104, 114, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 117, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 110, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 100, 108, 116, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 115, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 105, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 104, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 105, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 105, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 101, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 9, 32, 33, 58, 61, 63, 92, 96, 108, 0, 10, 11, 13, 14, 47, 59, 64, 91, 94, 123, 127, 61, 124, 0, 4, 10, 26, 32, 35, 92, 9, 13, 9, 32, 11, 13, 10, 10, 10, 0, 4, 10, 26, 32, 34, 35, 39, 92, 96, 1, 8, 9, 13, 14, 64, 91, 94, 123, 127, 9, 32, 11, 13, 10, 10, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 0, 4, 10, 26, 32, 33, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 58, 59, 60, 61, 62, 63, 64, 66, 69, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 109, 110, 111, 114, 115, 116, 117, 119, 121, 123, 124, 125, 126, 127, 1, 8, 9, 13, 14, 31, 34, 39, 43, 47, 49, 57, 65, 90, 9, 32, 11, 13, 61, 126, 10, 10, 35, 37, 45, 92, 96, 126, 0, 32, 33, 39, 40, 41, 42, 47, 48, 57, 58, 64, 91, 94, 123, 127, 48, 57, 96, 0, 47, 58, 64, 91, 94, 123, 127, 61, 38, 46, 61, 42, 61, 61, 62, 46, 46, 66, 68, 79, 88, 95, 98, 100, 105, 111, 114, 120, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 105, 114, 102, 101, 105, 115, 95, 105, 114, 48, 49, 95, 105, 114, 48, 49, 95, 105, 114, 48, 49, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 65, 70, 97, 102, 95, 105, 114, 48, 57, 65, 70, 97, 102, 95, 105, 114, 48, 57, 65, 70, 97, 102, 95, 105, 114, 48, 57, 95, 105, 114, 48, 57, 58, 60, 61, 62, 61, 62, 126, 61, 61, 62, 64, 96, 0, 47, 58, 63, 91, 94, 123, 127, 33, 58, 63, 96, 0, 47, 59, 64, 91, 94, 123, 127, 61, 33, 58, 63, 69, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 71, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 73, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 78, 96, 0, 47, 59, 64, 91, 94, 123, 127, 33, 58, 63, 68, 96, 0, 47, 59, 64, 91, 94, 123, 127, 10, 33, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 69, 70, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 67, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 79, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 68, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 71, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 63, 95, 0, 47, 58, 64, 91, 96, 123, 127, 33, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 76, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 69, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 73, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 78, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 103, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 107, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 97, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 97, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 10, 32, 33, 35, 60, 63, 92, 96, 0, 8, 9, 13, 14, 47, 58, 64, 91, 94, 123, 127, 10, 32, 35, 60, 92, 9, 13, 33, 63, 96, 101, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 97, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 102, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 105, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 120, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 115, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 111, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 99, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 114, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 121, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 112, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 104, 114, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 117, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 110, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 108, 116, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 102, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 115, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 104, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 105, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 101, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 108, 0, 47, 58, 64, 91, 94, 123, 127, 33, 63, 96, 100, 0, 47, 58, 64, 91, 94, 123, 127, 61, 124, 9, 32, 38, 46, 11, 13, 9, 32, 38, 46, 11, 13, 46, 0 , 0 ];
static _lexer_single_lengths: [i8 ; 838] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6, 1, 2, 1, 4, 5, 4, 5, 4, 3, 4, 7, 3, 2, 1, 5, 5, 3, 6, 1, 2, 1, 4, 5, 4, 5, 4, 3, 4, 7, 3, 2, 1, 5, 5, 3, 6, 1, 2, 1, 6, 1, 2, 1, 6, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1, 4, 1, 1, 28, 28, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 6, 3, 1, 4, 4, 4, 4, 4, 1, 6, 1, 3, 2, 1, 1, 6, 1, 1, 1, 1, 3, 2, 1, 1, 1, 5, 6, 6, 6, 6, 4, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 1, 1, 4, 1, 9, 2, 0, 1, 1, 1, 2, 1, 1, 7, 2, 3, 0, 1, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 1, 0, 0, 0, 5, 4, 5, 4, 0, 0, 4, 4, 1, 5, 1, 0, 0, 0, 0, 6, 0, 6, 6, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 3, 0, 1, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 1, 0, 0, 0, 5, 4, 5, 4, 0, 0, 4, 4, 1, 5, 1, 0, 0, 0, 0, 6, 0, 6, 6, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 6, 2, 3, 5, 4, 5, 3, 0, 1, 4, 6, 2, 3, 0, 1, 5, 2, 0, 0, 2, 0, 1, 1, 1, 42, 2, 0, 3, 1, 1, 6, 0, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 0, 4, 5, 5, 5, 5, 5, 5, 1, 1, 4, 4, 7, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 4, 6, 5, 6, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 5, 5, 1, 8, 2, 1, 1, 4, 1, 0, 23, 2, 0, 3, 1, 1, 1, 1, 1, 2, 1, 3, 1, 0, 3, 1, 0, 1, 1, 3, 1, 27, 28, 6, 5, 3, 0, 4, 2, 1, 1, 1, 2, 0, 4, 0, 4, 0, 1, 1, 0, 4, 1, 1, 1, 2, 1, 28, 1, 1, 1, 1, 8, 6, 0, 4, 5, 1, 9, 2, 1, 1, 1, 0, 1, 0, 12, 2, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 45, 2, 0, 2, 1, 1, 0, 3, 2, 0, 2, 1, 5, 4, 4, 1, 1, 3, 20, 3, 0, 1, 1, 1, 1, 2, 1, 1, 0, 4, 1, 0, 3, 2, 0, 0, 0, 0, 1, 1, 2, 0, 1, 3, 2, 4, 1, 5, 2, 0, 3, 1, 0, 0, 0, 6, 6, 0, 1, 8, 8, 11, 9, 9, 9, 9, 9, 9, 9, 8, 8, 5, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 10, 9, 10, 9, 10, 10, 9, 9, 10, 9, 9, 10, 9, 9, 9, 9, 11, 9, 9, 9, 9, 11, 9, 9, 9, 9, 10, 9, 9, 10, 9, 9, 9, 10, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 0, 2, 7, 2, 0, 1, 1, 1, 0, 10, 2, 0, 1, 1, 4, 1, 0, 53, 2, 0, 2, 1, 1, 6, 0, 1, 1, 3, 0, 0, 2, 2, 1, 1, 11, 3, 3, 3, 3, 2, 1, 0, 2, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 1, 3, 1, 2, 2, 4, 1, 0, 0, 5, 5, 5, 5, 5, 5, 0, 1, 0, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 8, 5, 5, 4, 4, 4, 4, 4, 3, 5, 4, 5, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 0, 2, 0, 4, 4, 1, 0 , 0 ];
static _lexer_range_lengths: [i8 ; 838] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 4, 4, 4, 8, 4, 4, 4, 8, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 2, 0, 2, 2, 2, 2, 2, 0, 8, 4, 0, 3, 3, 0, 3, 0, 0, 0, 0, 3, 4, 0, 3, 0, 4, 4, 4, 4, 4, 1, 0, 1, 0, 0, 4, 4, 0, 0, 0, 4, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 1, 4, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 1, 1, 0, 0, 0, 0, 0, 1, 4, 0, 1, 1, 0, 1, 4, 1, 1, 2, 2, 0, 1, 4, 4, 4, 6, 1, 0, 0, 0, 0, 8, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 5, 1, 0, 0, 4, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 4, 0, 3, 4, 1, 1, 1, 0, 1, 2, 0, 0, 0, 1, 0, 4, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 5, 5, 0, 4, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 3, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 1, 1, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 4, 0, 0, 7, 1, 0, 0, 0, 0, 8, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1, 1, 0, 0 , 0 ];
static _lexer_index_offsets: [i16 ; 838] = [ 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 23, 38, 44, 51, 57, 62, 68, 73, 79, 84, 88, 93, 101, 105, 108, 110, 116, 122, 129, 144, 150, 157, 163, 168, 174, 179, 185, 190, 194, 199, 207, 211, 214, 216, 222, 228, 235, 250, 256, 263, 269, 284, 290, 297, 303, 318, 324, 331, 337, 343, 347, 349, 351, 360, 362, 364, 373, 375, 377, 410, 443, 453, 463, 473, 483, 493, 503, 513, 524, 534, 544, 554, 564, 574, 584, 594, 604, 606, 608, 610, 612, 615, 617, 619, 621, 623, 625, 627, 629, 641, 643, 645, 657, 663, 665, 672, 679, 686, 693, 700, 702, 717, 723, 727, 733, 738, 740, 750, 752, 754, 756, 758, 765, 772, 774, 779, 781, 791, 802, 813, 824, 835, 841, 843, 849, 851, 853, 862, 868, 870, 872, 874, 880, 882, 889, 896, 903, 910, 917, 924, 926, 928, 934, 936, 947, 951, 952, 954, 956, 958, 962, 964, 966, 975, 979, 983, 985, 991, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1015, 1016, 1017, 1018, 1024, 1026, 1027, 1028, 1029, 1035, 1040, 1046, 1051, 1052, 1053, 1058, 1063, 1065, 1071, 1076, 1080, 1084, 1088, 1089, 1099, 1100, 1110, 1117, 1118, 1128, 1138, 1148, 1158, 1159, 1169, 1179, 1189, 1199, 1209, 1219, 1220, 1221, 1225, 1226, 1233, 1237, 1239, 1245, 1255, 1256, 1257, 1259, 1261, 1262, 1263, 1269, 1270, 1271, 1272, 1278, 1280, 1281, 1282, 1283, 1289, 1294, 1300, 1305, 1306, 1307, 1312, 1317, 1319, 1325, 1330, 1334, 1338, 1342, 1343, 1353, 1354, 1364, 1371, 1372, 1382, 1392, 1402, 1412, 1413, 1423, 1433, 1443, 1453, 1463, 1473, 1474, 1475, 1479, 1480, 1488, 1492, 1496, 1502, 1507, 1513, 1517, 1519, 1525, 1530, 1538, 1542, 1546, 1548, 1554, 1561, 1565, 1568, 1571, 1574, 1576, 1582, 1588, 1594, 1643, 1647, 1648, 1652, 1654, 1656, 1671, 1673, 1679, 1681, 1683, 1685, 1687, 1689, 1692, 1694, 1698, 1700, 1702, 1711, 1721, 1731, 1741, 1751, 1761, 1771, 1773, 1775, 1784, 1793, 1805, 1815, 1825, 1835, 1845, 1855, 1865, 1875, 1884, 1893, 1903, 1913, 1923, 1933, 1943, 1954, 1964, 1974, 1984, 1994, 2005, 2015, 2025, 2035, 2045, 2055, 2065, 2076, 2086, 2096, 2106, 2116, 2127, 2137, 2147, 2157, 2167, 2177, 2186, 2197, 2207, 2218, 2228, 2239, 2249, 2259, 2270, 2280, 2290, 2301, 2311, 2321, 2331, 2341, 2353, 2363, 2373, 2383, 2393, 2405, 2415, 2425, 2435, 2446, 2456, 2466, 2477, 2487, 2497, 2507, 2518, 2528, 2538, 2550, 2560, 2570, 2580, 2590, 2601, 2611, 2621, 2631, 2633, 2647, 2651, 2653, 2655, 2664, 2666, 2667, 2696, 2700, 2701, 2705, 2707, 2709, 2711, 2713, 2715, 2718, 2720, 2724, 2726, 2728, 2736, 2738, 2739, 2741, 2743, 2751, 2753, 2784, 2817, 2825, 2832, 2837, 2838, 2844, 2849, 2851, 2853, 2855, 2859, 2860, 2869, 2870, 2876, 2877, 2879, 2881, 2882, 2888, 2890, 2892, 2894, 2898, 2900, 2933, 2935, 2937, 2939, 2941, 2955, 2967, 2968, 2977, 2987, 2989, 3000, 3004, 3006, 3008, 3010, 3011, 3013, 3014, 3032, 3036, 3037, 3039, 3041, 3047, 3049, 3050, 3057, 3064, 3071, 3078, 3085, 3092, 3099, 3107, 3114, 3121, 3128, 3135, 3142, 3149, 3156, 3163, 3215, 3219, 3220, 3223, 3225, 3227, 3230, 3236, 3239, 3240, 3243, 3245, 3253, 3260, 3268, 3270, 3272, 3276, 3300, 3304, 3306, 3312, 3314, 3316, 3318, 3321, 3323, 3325, 3327, 3336, 3338, 3339, 3343, 3346, 3347, 3348, 3349, 3350, 3352, 3354, 3357, 3358, 3360, 3364, 3367, 3374, 3380, 3390, 3393, 3394, 3398, 3400, 3401, 3402, 3403, 3414, 3425, 3426, 3428, 3443, 3458, 3476, 3492, 3508, 3524, 3540, 3556, 3572, 3588, 3603, 3618, 3628, 3644, 3660, 3676, 3692, 3708, 3725, 3741, 3757, 3773, 3789, 3806, 3822, 3838, 3854, 3870, 3886, 3902, 3919, 3935, 3951, 3967, 3983, 4000, 4016, 4033, 4049, 4066, 4083, 4099, 4115, 4132, 4148, 4164, 4181, 4197, 4213, 4229, 4245, 4263, 4279, 4295, 4311, 4327, 4345, 4361, 4377, 4393, 4409, 4426, 4442, 4458, 4475, 4491, 4507, 4523, 4540, 4556, 4572, 4588, 4606, 4622, 4638, 4654, 4670, 4686, 4702, 4718, 4735, 4751, 4767, 4783, 4799, 4800, 4803, 4812, 4816, 4817, 4819, 4821, 4823, 4824, 4840, 4844, 4845, 4847, 4849, 4858, 4860, 4861, 4922, 4926, 4927, 4930, 4932, 4934, 4949, 4951, 4957, 4959, 4963, 4964, 4965, 4968, 4971, 4973, 4975, 4988, 4993, 4998, 5003, 5008, 5011, 5013, 5014, 5017, 5019, 5020, 5021, 5026, 5031, 5036, 5041, 5046, 5053, 5060, 5067, 5072, 5077, 5079, 5082, 5084, 5088, 5090, 5093, 5100, 5109, 5111, 5112, 5113, 5123, 5133, 5143, 5153, 5163, 5173, 5174, 5176, 5177, 5185, 5193, 5204, 5213, 5222, 5231, 5240, 5249, 5258, 5267, 5275, 5283, 5292, 5301, 5310, 5319, 5328, 5338, 5347, 5356, 5365, 5374, 5384, 5393, 5402, 5411, 5420, 5429, 5438, 5448, 5457, 5466, 5475, 5484, 5493, 5508, 5515, 5525, 5534, 5543, 5552, 5561, 5570, 5578, 5588, 5597, 5607, 5616, 5626, 5635, 5644, 5654, 5663, 5672, 5681, 5690, 5700, 5709, 5718, 5727, 5736, 5747, 5756, 5765, 5774, 5783, 5792, 5803, 5812, 5821, 5830, 5839, 5849, 5858, 5867, 5876, 5886, 5895, 5904, 5913, 5922, 5931, 5941, 5950, 5959, 5968, 5979, 5988, 5997, 6006, 6015, 6024, 6033, 6042, 6051, 6061, 6070, 6079, 6088, 6097, 6106, 6115, 6116, 6119, 6120, 6126, 6132, 0 , 0 ];
static _lexer_trans_cond_spaces: [i8 ; 6944] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _lexer_trans_offsets: [i16 ; 6944] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480, 6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941, 0 , 0 ];
static _lexer_trans_lengths: [i8 ; 6944] = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _lexer_cond_keys: [i8 ; 6944] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_cond_targs: [i16 ; 6944] = [ 2, 154, 3, 154, 4, 154, 160, 154, 6, 154, 7, 154, 8, 154, 9, 154, 10, 154, 154, 154, 154, 154, 154, 163, 163, 12, 163, 163, 163, 163, 163, 163, 163, 166, 163, 163, 163, 167, 163, 163, 163, 163, 163, 163, 14, 163, 163, 163, 163, 163, 167, 163, 163, 163, 163, 163, 167, 163, 163, 163, 175, 174, 163, 163, 179, 163, 185, 178, 163, 163, 163, 180, 178, 163, 163, 163, 182, 19, 181, 163, 163, 184, 163, 183, 163, 163, 163, 183, 163, 163, 163, 187, 174, 163, 163, 190, 163, 191, 192, 193, 189, 163, 163, 163, 189, 25, 18, 163, 18, 163, 163, 163, 163, 177, 27, 176, 163, 163, 179, 163, 180, 178, 163, 163, 163, 217, 217, 217, 216, 219, 219, 30, 219, 219, 219, 219, 219, 219, 219, 221, 219, 219, 219, 222, 219, 219, 219, 219, 219, 219, 32, 219, 219, 219, 219, 219, 222, 219, 219, 219, 219, 219, 222, 219, 219, 219, 230, 229, 219, 219, 234, 219, 240, 233, 219, 219, 219, 235, 233, 219, 219, 219, 237, 37, 236, 219, 219, 239, 219, 238, 219, 219, 219, 238, 219, 219, 219, 242, 229, 219, 219, 245, 219, 246, 247, 248, 244, 219, 219, 219, 244, 43, 36, 219, 36, 219, 219, 219, 219, 232, 45, 231, 219, 219, 234, 219, 235, 233, 219, 219, 219, 272, 272, 272, 271, 279, 279, 48, 279, 279, 279, 279, 279, 279, 279, 281, 279, 279, 279, 282, 279, 279, 279, 279, 279, 279, 50, 279, 279, 279, 279, 279, 282, 279, 279, 279, 279, 279, 282, 284, 284, 52, 284, 284, 284, 284, 284, 284, 284, 287, 284, 284, 284, 288, 284, 284, 284, 284, 284, 284, 54, 284, 284, 284, 284, 284, 288, 284, 284, 284, 284, 284, 288, 0, 0, 56, 293, 293, 293, 0, 293, 0, 293, 294, 293, 0, 0, 295, 0, 0, 0, 0, 0, 293, 58, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 297, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 62, 411, 411, 411, 61, 62, 61, 411, 411, 411, 411, 411, 63, 443, 439, 443, 439, 67, 439, 67, 439, 439, 439, 439, 439, 66, 439, 439, 69, 439, 70, 70, 441, 442, 444, 445, 443, 439, 446, 447, 441, 449, 64, 439, 65, 450, 451, 68, 439, 443, 439, 71, 72, 77, 84, 453, 454, 443, 439, 70, 439, 439, 66, 70, 70, 441, 442, 444, 445, 443, 439, 446, 447, 441, 449, 64, 439, 65, 450, 451, 68, 439, 443, 439, 71, 72, 77, 84, 453, 454, 443, 439, 70, 439, 439, 66, 67, 439, 67, 439, 452, 439, 439, 439, 439, 66, 67, 439, 67, 439, 73, 439, 439, 439, 439, 66, 67, 439, 67, 439, 74, 439, 439, 439, 439, 66, 67, 439, 67, 439, 75, 439, 439, 439, 439, 66, 67, 439, 67, 439, 76, 439, 439, 439, 439, 66, 67, 439, 67, 439, 452, 439, 439, 439, 439, 66, 67, 439, 67, 439, 78, 439, 439, 439, 439, 66, 67, 439, 67, 439, 79, 82, 439, 439, 439, 439, 66, 67, 439, 67, 439, 80, 439, 439, 439, 439, 66, 67, 439, 67, 439, 81, 439, 439, 439, 439, 66, 67, 439, 67, 439, 452, 439, 439, 439, 439, 66, 67, 439, 67, 439, 83, 439, 439, 439, 439, 66, 67, 439, 67, 439, 452, 439, 439, 439, 439, 66, 67, 439, 67, 439, 85, 439, 439, 439, 439, 66, 67, 439, 67, 439, 86, 439, 439, 439, 439, 66, 67, 439, 67, 439, 76, 439, 439, 439, 439, 66, 88, 439, 89, 439, 90, 439, 439, 439, 92, 95, 439, 93, 439, 94, 439, 439, 439, 96, 439, 439, 439, 98, 439, 90, 439, 99, 99, 472, 101, 470, 474, 470, 99, 470, 470, 470, 473, 470, 470, 102, 470, 99, 99, 472, 101, 470, 474, 470, 99, 470, 470, 470, 473, 508, 508, 508, 515, 515, 508, 508, 508, 106, 105, 107, 110, 105, 508, 508, 106, 105, 107, 110, 105, 508, 508, 106, 108, 107, 109, 108, 521, 108, 106, 108, 107, 109, 108, 521, 108, 106, 108, 107, 109, 108, 521, 108, 106, 508, 508, 508, 112, 508, 508, 508, 508, 508, 508, 508, 528, 508, 508, 508, 529, 508, 508, 508, 508, 508, 508, 535, 508, 508, 508, 115, 508, 508, 508, 508, 529, 508, 508, 508, 508, 529, 535, 508, 118, 121, 122, 508, 124, 122, 508, 508, 508, 123, 119, 118, 549, 120, 549, 120, 119, 121, 118, 121, 124, 508, 508, 508, 123, 549, 120, 120, 120, 120, 120, 123, 119, 124, 508, 508, 508, 508, 554, 508, 508, 556, 126, 558, 556, 508, 508, 508, 508, 508, 127, 556, 126, 558, 556, 129, 508, 508, 508, 508, 508, 127, 556, 126, 558, 556, 130, 508, 508, 508, 508, 508, 127, 556, 126, 558, 556, 555, 508, 508, 508, 508, 508, 127, 556, 126, 558, 556, 555, 508, 508, 508, 508, 508, 127, 132, 132, 508, 133, 132, 508, 134, 508, 132, 132, 508, 133, 132, 508, 136, 661, 661, 661, 135, 136, 135, 661, 661, 661, 661, 661, 137, 669, 669, 669, 669, 669, 669, 140, 669, 141, 669, 696, 669, 669, 669, 669, 669, 669, 677, 718, 669, 145, 144, 146, 150, 151, 144, 669, 145, 144, 146, 150, 151, 144, 669, 145, 147, 146, 148, 149, 147, 147, 145, 147, 146, 148, 149, 147, 147, 145, 147, 146, 764, 149, 147, 147, 145, 147, 146, 148, 149, 147, 147, 669, 669, 145, 669, 152, 152, 153, 833, 152, 833, 833, 833, 154, 154, 156, 154, 155, 157, 159, 161, 162, 155, 154, 155, 155, 155, 154, 154, 154, 158, 154, 158, 1, 154, 154, 154, 154, 154, 156, 154, 5, 154, 163, 163, 163, 163, 164, 165, 168, 164, 163, 164, 164, 164, 163, 11, 13, 163, 163, 166, 163, 163, 163, 163, 163, 163, 167, 169, 169, 169, 15, 21, 26, 194, 28, 171, 170, 163, 163, 172, 163, 173, 163, 163, 163, 163, 163, 163, 177, 16, 176, 163, 163, 163, 163, 163, 163, 177, 17, 176, 18, 163, 163, 163, 163, 163, 163, 163, 182, 20, 181, 163, 163, 163, 186, 174, 163, 163, 163, 182, 19, 181, 163, 163, 163, 22, 188, 163, 163, 163, 163, 163, 23, 188, 163, 163, 163, 186, 174, 24, 163, 163, 163, 163, 182, 19, 181, 199, 195, 195, 195, 163, 196, 196, 196, 163, 197, 197, 197, 163, 198, 198, 198, 163, 163, 200, 200, 204, 200, 204, 215, 206, 206, 206, 201, 163, 200, 200, 163, 200, 163, 203, 202, 202, 202, 201, 200, 200, 163, 200, 163, 163, 202, 163, 200, 200, 204, 200, 204, 163, 206, 206, 206, 205, 200, 200, 163, 200, 163, 200, 202, 202, 202, 205, 200, 200, 207, 200, 207, 208, 209, 209, 209, 205, 200, 200, 207, 200, 207, 208, 206, 206, 206, 205, 163, 200, 200, 207, 200, 207, 208, 210, 210, 210, 205, 200, 200, 207, 200, 207, 208, 211, 211, 211, 205, 200, 200, 207, 200, 207, 208, 212, 212, 212, 205, 200, 200, 207, 200, 207, 208, 213, 213, 213, 205, 200, 200, 207, 200, 207, 208, 214, 214, 214, 205, 200, 200, 163, 200, 163, 163, 214, 214, 214, 205, 163, 163, 218, 218, 218, 163, 163, 219, 219, 219, 219, 220, 223, 219, 29, 31, 219, 219, 221, 219, 219, 219, 219, 219, 219, 222, 224, 224, 224, 33, 39, 44, 249, 46, 226, 225, 219, 219, 227, 219, 228, 219, 219, 219, 219, 219, 219, 232, 34, 231, 219, 219, 219, 219, 219, 219, 232, 35, 231, 36, 219, 219, 219, 219, 219, 219, 219, 237, 38, 236, 219, 219, 219, 241, 229, 219, 219, 219, 237, 37, 236, 219, 219, 219, 40, 243, 219, 219, 219, 219, 219, 41, 243, 219, 219, 219, 241, 229, 42, 219, 219, 219, 219, 237, 37, 236, 254, 250, 250, 250, 219, 251, 251, 251, 219, 252, 252, 252, 219, 253, 253, 253, 219, 219, 255, 255, 259, 255, 259, 270, 261, 261, 261, 256, 219, 255, 255, 219, 255, 219, 258, 257, 257, 257, 256, 255, 255, 219, 255, 219, 219, 257, 219, 255, 255, 259, 255, 259, 219, 261, 261, 261, 260, 255, 255, 219, 255, 219, 255, 257, 257, 257, 260, 255, 255, 262, 255, 262, 263, 264, 264, 264, 260, 255, 255, 262, 255, 262, 263, 261, 261, 261, 260, 219, 255, 255, 262, 255, 262, 263, 265, 265, 265, 260, 255, 255, 262, 255, 262, 263, 266, 266, 266, 260, 255, 255, 262, 255, 262, 263, 267, 267, 267, 260, 255, 255, 262, 255, 262, 263, 268, 268, 268, 260, 255, 255, 262, 255, 262, 263, 269, 269, 269, 260, 255, 255, 219, 255, 219, 219, 269, 269, 269, 260, 219, 219, 273, 273, 273, 219, 219, 274, 274, 274, 274, 275, 276, 275, 274, 275, 275, 275, 274, 274, 274, 274, 274, 277, 277, 277, 277, 278, 277, 277, 277, 277, 277, 277, 279, 279, 279, 279, 280, 279, 47, 49, 279, 279, 281, 279, 279, 279, 279, 279, 279, 282, 283, 283, 283, 283, 283, 284, 284, 284, 284, 285, 286, 285, 284, 285, 285, 285, 284, 51, 53, 284, 284, 287, 284, 284, 284, 284, 284, 284, 288, 289, 289, 289, 289, 290, 290, 289, 290, 290, 290, 289, 292, 292, 291, 292, 292, 291, 55, 57, 0, 294, 293, 293, 293, 293, 293, 293, 295, 293, 293, 293, 293, 293, 296, 293, 293, 293, 293, 293, 297, 298, 298, 300, 298, 299, 301, 302, 304, 307, 308, 309, 310, 310, 298, 311, 312, 314, 316, 318, 322, 324, 325, 298, 326, 343, 348, 355, 360, 367, 374, 377, 378, 382, 376, 386, 394, 398, 400, 405, 407, 410, 310, 298, 299, 298, 317, 298, 298, 327, 299, 299, 299, 298, 298, 298, 298, 298, 298, 298, 303, 298, 303, 298, 298, 59, 298, 298, 298, 298, 298, 298, 298, 305, 298, 298, 298, 306, 305, 298, 298, 298, 298, 298, 298, 306, 60, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 313, 298, 298, 298, 315, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 317, 298, 298, 298, 319, 298, 298, 298, 298, 298, 317, 298, 298, 298, 320, 298, 298, 298, 298, 298, 317, 298, 298, 298, 321, 298, 298, 298, 298, 298, 317, 298, 298, 298, 317, 298, 298, 298, 298, 298, 317, 298, 298, 298, 323, 298, 298, 298, 298, 298, 317, 298, 298, 298, 317, 298, 298, 298, 298, 298, 317, 315, 298, 300, 298, 298, 298, 298, 328, 298, 298, 298, 298, 327, 298, 298, 298, 298, 298, 298, 298, 298, 327, 298, 298, 298, 329, 338, 341, 298, 298, 298, 298, 298, 327, 298, 298, 298, 330, 298, 298, 298, 298, 298, 327, 298, 298, 298, 331, 298, 298, 298, 298, 298, 327, 298, 298, 298, 332, 298, 298, 298, 298, 298, 327, 298, 298, 298, 333, 298, 298, 298, 298, 298, 327, 298, 298, 298, 334, 298, 298, 298, 298, 298, 327, 298, 298, 298, 335, 298, 298, 298, 298, 298, 327, 298, 298, 298, 336, 298, 298, 298, 298, 298, 327, 298, 298, 298, 337, 298, 298, 298, 298, 327, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 339, 298, 298, 298, 298, 298, 327, 298, 298, 298, 340, 298, 298, 298, 298, 298, 327, 298, 298, 298, 336, 298, 298, 298, 298, 298, 327, 298, 298, 298, 342, 298, 298, 298, 298, 298, 327, 298, 298, 298, 340, 298, 298, 298, 298, 298, 327, 298, 298, 298, 298, 344, 347, 298, 298, 298, 298, 327, 298, 298, 298, 298, 345, 298, 298, 298, 298, 327, 298, 298, 298, 298, 346, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 349, 352, 298, 298, 298, 298, 327, 298, 298, 298, 298, 350, 298, 298, 298, 298, 327, 298, 298, 298, 298, 351, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 353, 298, 298, 298, 298, 327, 298, 298, 298, 298, 354, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 356, 358, 298, 298, 298, 298, 327, 298, 298, 298, 298, 357, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 359, 298, 298, 298, 298, 327, 298, 298, 298, 298, 346, 298, 298, 298, 298, 327, 298, 298, 298, 298, 361, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 362, 298, 298, 298, 298, 327, 298, 298, 298, 298, 363, 298, 298, 298, 298, 327, 298, 298, 298, 298, 364, 298, 298, 298, 298, 327, 298, 298, 298, 298, 365, 298, 298, 298, 298, 327, 298, 298, 298, 298, 366, 298, 298, 298, 298, 327, 298, 298, 298, 298, 298, 298, 298, 298, 327, 298, 298, 298, 298, 368, 371, 298, 298, 298, 298, 327, 298, 298, 298, 298, 369, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 370, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 372, 298, 298, 298, 298, 327, 298, 298, 298, 298, 373, 298, 298, 298, 298, 327, 298, 298, 298, 298, 357, 298, 298, 298, 298, 327, 298, 298, 298, 298, 375, 376, 298, 298, 298, 298, 327, 298, 298, 298, 298, 356, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 379, 298, 298, 298, 298, 327, 298, 298, 298, 298, 380, 298, 298, 298, 298, 327, 298, 298, 298, 298, 381, 298, 298, 298, 298, 327, 298, 298, 298, 298, 357, 298, 298, 298, 298, 327, 298, 298, 298, 298, 383, 385, 384, 298, 298, 298, 298, 327, 298, 298, 298, 298, 384, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 387, 298, 298, 298, 298, 327, 298, 298, 298, 298, 388, 389, 391, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 390, 298, 298, 298, 298, 327, 298, 298, 298, 298, 357, 298, 298, 298, 298, 327, 298, 298, 298, 298, 392, 393, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 327, 298, 298, 298, 298, 351, 298, 298, 298, 298, 327, 298, 298, 298, 298, 395, 396, 298, 298, 298, 298, 327, 298, 298, 298, 298, 370, 298, 298, 298, 298, 327, 298, 298, 298, 298, 397, 298, 298, 298, 298, 327, 298, 298, 298, 298, 376, 298, 298, 298, 298, 327, 298, 298, 298, 298, 399, 390, 298, 298, 298, 298, 327, 298, 298, 298, 298, 351, 298, 298, 298, 298, 327, 298, 298, 298, 298, 401, 298, 298, 298, 298, 327, 298, 298, 298, 298, 402, 403, 404, 298, 298, 298, 298, 327, 298, 298, 298, 298, 370, 298, 298, 298, 298, 327, 298, 298, 298, 298, 359, 298, 298, 298, 298, 327, 298, 298, 298, 298, 385, 298, 298, 298, 298, 327, 298, 298, 298, 298, 406, 298, 298, 298, 298, 327, 298, 298, 298, 298, 351, 381, 298, 298, 298, 298, 327, 298, 298, 298, 298, 408, 298, 298, 298, 298, 327, 298, 298, 298, 298, 409, 298, 298, 298, 298, 327, 298, 298, 298, 298, 347, 298, 298, 298, 298, 327, 298, 298, 411, 411, 412, 411, 412, 413, 416, 411, 411, 412, 411, 411, 411, 415, 412, 412, 412, 411, 411, 414, 411, 414, 61, 62, 61, 411, 411, 411, 411, 411, 63, 417, 411, 411, 418, 418, 420, 418, 419, 421, 422, 418, 424, 425, 426, 426, 418, 427, 429, 431, 435, 436, 418, 418, 418, 438, 426, 418, 419, 418, 432, 418, 437, 419, 419, 419, 418, 418, 418, 418, 418, 418, 418, 423, 418, 423, 418, 418, 418, 418, 418, 418, 418, 428, 418, 418, 418, 430, 418, 418, 418, 418, 418, 418, 418, 433, 433, 418, 418, 418, 418, 418, 432, 434, 418, 418, 430, 418, 420, 418, 433, 433, 418, 418, 418, 418, 418, 437, 418, 418, 439, 439, 455, 439, 440, 456, 443, 442, 458, 459, 439, 446, 447, 460, 461, 439, 462, 463, 464, 443, 466, 467, 468, 469, 453, 454, 443, 440, 443, 439, 439, 440, 440, 441, 442, 444, 445, 443, 439, 446, 447, 441, 449, 64, 439, 65, 450, 451, 68, 439, 443, 439, 71, 72, 77, 84, 453, 454, 443, 439, 440, 439, 439, 66, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 443, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 443, 439, 439, 439, 439, 439, 439, 439, 439, 448, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 67, 439, 67, 439, 439, 439, 439, 439, 66, 439, 439, 439, 439, 443, 439, 439, 439, 439, 457, 439, 457, 439, 439, 439, 443, 439, 439, 439, 439, 439, 443, 439, 443, 439, 439, 439, 439, 439, 465, 439, 70, 70, 441, 442, 444, 445, 443, 439, 446, 447, 441, 449, 64, 439, 65, 450, 451, 68, 439, 443, 439, 71, 72, 77, 84, 453, 454, 443, 439, 70, 439, 439, 66, 439, 439, 87, 439, 91, 439, 97, 439, 470, 470, 471, 470, 471, 475, 470, 474, 470, 471, 470, 470, 470, 473, 99, 99, 472, 101, 470, 474, 470, 99, 470, 470, 470, 473, 470, 100, 470, 100, 470, 470, 470, 470, 470, 473, 100, 470, 100, 470, 473, 470, 470, 470, 470, 473, 102, 470, 476, 476, 477, 476, 477, 478, 480, 482, 483, 477, 476, 477, 477, 477, 476, 476, 479, 476, 479, 481, 476, 476, 476, 476, 476, 484, 484, 486, 484, 485, 487, 490, 484, 492, 493, 498, 505, 484, 485, 484, 484, 484, 489, 485, 485, 485, 484, 484, 484, 488, 484, 488, 484, 484, 484, 484, 484, 489, 491, 484, 484, 484, 489, 484, 484, 484, 484, 489, 484, 494, 484, 484, 484, 484, 489, 484, 495, 484, 484, 484, 484, 489, 484, 496, 484, 484, 484, 484, 489, 484, 497, 484, 484, 484, 484, 489, 484, 489, 484, 484, 484, 484, 489, 484, 499, 484, 484, 484, 484, 489, 484, 500, 503, 484, 484, 484, 484, 489, 484, 501, 484, 484, 484, 484, 489, 484, 502, 484, 484, 484, 484, 489, 484, 489, 484, 484, 484, 484, 489, 484, 504, 484, 484, 484, 484, 489, 484, 489, 484, 484, 484, 484, 489, 484, 506, 484, 484, 484, 484, 489, 484, 507, 484, 484, 484, 484, 489, 484, 497, 484, 484, 484, 484, 489, 508, 508, 510, 508, 509, 511, 512, 514, 516, 517, 518, 520, 522, 523, 525, 526, 548, 551, 552, 553, 563, 564, 565, 566, 519, 567, 585, 590, 597, 602, 604, 610, 613, 614, 618, 612, 622, 631, 635, 638, 646, 649, 652, 653, 519, 508, 509, 508, 555, 508, 508, 568, 509, 509, 509, 508, 508, 508, 508, 508, 508, 513, 508, 513, 103, 103, 508, 508, 508, 508, 515, 515, 508, 104, 508, 508, 508, 519, 508, 508, 508, 508, 106, 105, 107, 508, 110, 105, 508, 508, 106, 108, 107, 109, 108, 521, 108, 106, 105, 107, 110, 105, 508, 508, 508, 524, 508, 508, 508, 508, 508, 508, 508, 527, 508, 111, 508, 530, 508, 531, 532, 532, 508, 508, 533, 113, 536, 114, 116, 508, 508, 546, 547, 508, 508, 508, 537, 508, 508, 508, 508, 528, 508, 508, 508, 508, 508, 508, 529, 508, 508, 508, 508, 508, 508, 508, 534, 508, 508, 508, 508, 508, 508, 508, 538, 540, 538, 508, 508, 508, 508, 508, 537, 539, 508, 508, 541, 544, 545, 508, 542, 543, 508, 508, 508, 508, 508, 508, 508, 508, 508, 117, 550, 508, 508, 508, 508, 519, 508, 508, 508, 508, 104, 508, 508, 508, 508, 125, 125, 125, 508, 508, 508, 508, 508, 508, 554, 556, 126, 558, 556, 508, 508, 508, 508, 508, 127, 126, 557, 508, 508, 559, 561, 562, 508, 560, 508, 508, 508, 508, 556, 126, 558, 556, 128, 508, 508, 508, 508, 508, 127, 556, 126, 558, 556, 131, 508, 508, 508, 508, 508, 127, 508, 510, 508, 132, 132, 556, 126, 558, 556, 133, 569, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 570, 580, 583, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 571, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 572, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 573, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 574, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 575, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 576, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 577, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 578, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 579, 508, 132, 508, 508, 508, 508, 568, 556, 126, 558, 556, 508, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 581, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 582, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 577, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 584, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 582, 133, 508, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 586, 589, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 587, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 588, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 591, 594, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 592, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 593, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 595, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 596, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 598, 600, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 599, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 601, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 588, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 603, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 605, 607, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 606, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 603, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 608, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 609, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 599, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 611, 612, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 598, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 615, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 616, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 617, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 599, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 619, 621, 620, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 620, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 623, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 624, 625, 628, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 626, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 627, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 629, 630, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 593, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 632, 633, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 603, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 634, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 612, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 636, 637, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 593, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 599, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 639, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 640, 641, 644, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 603, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 642, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 643, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 645, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 579, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 647, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 593, 648, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 627, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 650, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 651, 508, 132, 508, 508, 508, 508, 568, 132, 132, 556, 126, 558, 556, 133, 508, 589, 508, 132, 508, 508, 508, 508, 568, 508, 508, 104, 508, 654, 654, 656, 654, 655, 657, 659, 655, 654, 655, 655, 655, 654, 654, 654, 658, 654, 658, 660, 654, 654, 661, 661, 663, 661, 662, 661, 664, 661, 667, 661, 661, 662, 661, 661, 661, 666, 662, 662, 662, 661, 661, 661, 665, 661, 665, 135, 136, 135, 661, 661, 661, 661, 661, 137, 668, 661, 661, 669, 669, 671, 669, 670, 672, 673, 675, 678, 679, 680, 681, 682, 669, 683, 684, 686, 708, 669, 709, 711, 713, 669, 714, 719, 723, 725, 726, 669, 678, 728, 669, 745, 750, 757, 765, 772, 779, 784, 785, 789, 783, 794, 804, 810, 813, 822, 826, 830, 831, 832, 678, 669, 669, 670, 669, 669, 678, 706, 715, 729, 670, 670, 670, 669, 669, 669, 669, 669, 669, 674, 669, 674, 669, 669, 138, 669, 669, 669, 669, 669, 669, 669, 676, 669, 669, 669, 677, 676, 669, 669, 669, 669, 669, 669, 677, 669, 669, 678, 669, 669, 669, 669, 669, 678, 669, 669, 669, 669, 669, 685, 669, 669, 669, 698, 701, 702, 703, 688, 698, 701, 692, 702, 694, 703, 687, 669, 688, 692, 694, 687, 669, 691, 692, 694, 689, 669, 690, 692, 694, 689, 669, 691, 692, 694, 689, 669, 692, 694, 669, 693, 669, 669, 695, 697, 669, 139, 669, 669, 669, 691, 692, 694, 699, 669, 700, 692, 694, 699, 669, 691, 692, 694, 699, 669, 691, 692, 694, 689, 669, 691, 692, 694, 689, 669, 691, 692, 694, 704, 704, 704, 669, 705, 692, 694, 704, 704, 704, 669, 691, 692, 694, 704, 704, 704, 669, 707, 692, 694, 706, 669, 691, 692, 694, 689, 669, 669, 669, 678, 710, 669, 669, 669, 712, 669, 669, 669, 669, 669, 669, 678, 669, 142, 669, 669, 669, 669, 669, 677, 716, 143, 716, 669, 669, 669, 669, 669, 715, 717, 669, 669, 669, 716, 143, 716, 720, 669, 669, 669, 669, 669, 715, 716, 143, 716, 721, 669, 669, 669, 669, 669, 715, 716, 143, 716, 722, 669, 669, 669, 669, 669, 715, 716, 143, 716, 715, 669, 669, 669, 669, 669, 715, 716, 143, 716, 724, 669, 669, 669, 669, 669, 715, 716, 143, 716, 715, 669, 669, 669, 669, 669, 715, 669, 727, 669, 669, 716, 716, 730, 669, 669, 669, 669, 729, 716, 716, 669, 669, 669, 669, 669, 729, 716, 716, 731, 740, 743, 669, 669, 669, 669, 669, 729, 716, 716, 732, 669, 669, 669, 669, 669, 729, 716, 716, 733, 669, 669, 669, 669, 669, 729, 716, 716, 734, 669, 669, 669, 669, 669, 729, 716, 716, 735, 669, 669, 669, 669, 669, 729, 716, 716, 736, 669, 669, 669, 669, 669, 729, 716, 716, 737, 669, 669, 669, 669, 669, 729, 716, 716, 738, 669, 669, 669, 669, 669, 729, 716, 716, 739, 669, 669, 669, 669, 729, 716, 716, 729, 669, 669, 669, 669, 729, 716, 716, 741, 669, 669, 669, 669, 669, 729, 716, 716, 742, 669, 669, 669, 669, 669, 729, 716, 716, 738, 669, 669, 669, 669, 669, 729, 716, 716, 744, 669, 669, 669, 669, 669, 729, 716, 716, 742, 669, 669, 669, 669, 669, 729, 716, 716, 669, 746, 749, 669, 669, 669, 669, 729, 716, 716, 669, 747, 669, 669, 669, 669, 729, 716, 716, 669, 748, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 751, 754, 669, 669, 669, 669, 729, 716, 716, 669, 752, 669, 669, 669, 669, 729, 716, 716, 669, 753, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 755, 669, 669, 669, 669, 729, 716, 716, 669, 756, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 758, 760, 669, 669, 669, 669, 729, 716, 716, 669, 759, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 761, 669, 669, 669, 669, 729, 716, 716, 669, 762, 669, 669, 669, 669, 729, 716, 716, 669, 763, 669, 669, 669, 669, 729, 145, 144, 716, 146, 150, 716, 151, 669, 669, 144, 669, 669, 669, 669, 729, 145, 147, 146, 764, 149, 147, 147, 716, 716, 669, 766, 729, 669, 669, 669, 669, 729, 716, 716, 669, 767, 669, 669, 669, 669, 729, 716, 716, 669, 768, 669, 669, 669, 669, 729, 716, 716, 669, 769, 669, 669, 669, 669, 729, 716, 716, 669, 770, 669, 669, 669, 669, 729, 716, 716, 669, 771, 669, 669, 669, 669, 729, 716, 716, 669, 669, 669, 669, 669, 729, 716, 716, 669, 773, 776, 669, 669, 669, 669, 729, 716, 716, 669, 774, 669, 669, 669, 669, 729, 716, 716, 669, 729, 775, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 729, 777, 669, 669, 669, 669, 729, 716, 716, 669, 778, 669, 669, 669, 669, 729, 716, 716, 669, 759, 669, 669, 669, 669, 729, 716, 716, 669, 780, 783, 669, 669, 669, 669, 729, 716, 716, 669, 781, 669, 669, 669, 669, 729, 716, 716, 669, 782, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 729, 729, 669, 669, 669, 669, 729, 716, 716, 669, 786, 669, 669, 669, 669, 729, 716, 716, 669, 787, 669, 669, 669, 669, 729, 716, 716, 669, 788, 669, 669, 669, 669, 729, 716, 716, 669, 759, 669, 669, 669, 669, 729, 716, 716, 669, 790, 792, 793, 669, 669, 669, 669, 729, 716, 716, 669, 791, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 795, 669, 669, 669, 669, 729, 716, 716, 669, 796, 797, 800, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 798, 669, 669, 669, 669, 729, 716, 716, 669, 799, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 801, 802, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 803, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 805, 807, 669, 669, 669, 669, 729, 716, 716, 669, 806, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 808, 669, 669, 669, 669, 729, 716, 716, 669, 809, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 811, 812, 669, 669, 669, 669, 729, 716, 716, 669, 753, 669, 669, 669, 669, 729, 716, 716, 669, 782, 669, 669, 669, 669, 729, 716, 716, 669, 814, 669, 669, 669, 669, 729, 716, 716, 669, 815, 817, 820, 669, 669, 669, 669, 729, 716, 716, 669, 816, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 818, 669, 669, 669, 669, 729, 716, 716, 669, 819, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 821, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 823, 669, 669, 669, 669, 729, 716, 716, 669, 753, 824, 669, 669, 669, 669, 729, 716, 716, 669, 825, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 716, 716, 669, 827, 669, 669, 669, 669, 729, 716, 716, 669, 828, 669, 669, 669, 669, 729, 716, 716, 669, 829, 669, 669, 669, 669, 729, 716, 716, 669, 729, 669, 669, 669, 669, 729, 669, 669, 678, 669, 669, 834, 834, 835, 833, 834, 833, 152, 152, 153, 833, 152, 833, 833, 833, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 279, 279, 279, 279, 284, 284, 284, 284, 298, 298, 411, 411, 411, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 470, 470, 470, 470, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 661, 661, 661, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 833, 833, 154, 154, 154, 154, 154, 154, 154, 154, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 274, 274, 277, 279, 279, 279, 284, 284, 284, 284, 289, 291, 293, 293, 293, 293, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 411, 411, 411, 411, 411, 411, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 470, 470, 470, 470, 470, 476, 476, 476, 476, 476, 476, 476, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 654, 654, 654, 654, 654, 654, 661, 661, 661, 661, 661, 661, 661, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 669, 833, 833, 0 , 0 ];
static _lexer_cond_actions: [i16 ; 6944] = [ 0, 441, 0, 441, 0, 441, 0, 441, 0, 441, 0, 441, 0, 441, 0, 441, 0, 441, 429, 429, 482, 429, 441, 61, 61, 0, 47, 47, 47, 61, 47, 61, 47, 0, 47, 61, 61, 0, 61, 61, 61, 61, 61, 47, 0, 61, 61, 61, 61, 61, 0, 61, 61, 61, 61, 61, 0, 59, 59, 59, 43, 0, 59, 59, 818, 59, 0, 0, 59, 59, 59, 43, 0, 59, 59, 59, 0, 0, 0, 59, 59, 818, 59, 0, 59, 59, 59, 0, 59, 59, 59, 43, 0, 59, 59, 818, 59, 0, 43, 43, 0, 59, 59, 59, 0, 0, 0, 59, 0, 59, 59, 59, 59, 0, 0, 0, 59, 59, 818, 59, 43, 0, 59, 59, 59, 0, 0, 0, 0, 77, 77, 0, 65, 65, 65, 77, 65, 77, 65, 0, 65, 77, 77, 0, 77, 77, 77, 77, 77, 65, 0, 77, 77, 77, 77, 77, 0, 77, 77, 77, 77, 77, 0, 75, 75, 75, 43, 0, 75, 75, 818, 75, 0, 0, 75, 75, 75, 43, 0, 75, 75, 75, 0, 0, 0, 75, 75, 818, 75, 0, 75, 75, 75, 0, 75, 75, 75, 43, 0, 75, 75, 818, 75, 0, 43, 43, 0, 75, 75, 75, 0, 0, 0, 75, 0, 75, 75, 75, 75, 0, 0, 0, 75, 75, 818, 75, 43, 0, 75, 75, 75, 0, 0, 0, 0, 105, 105, 0, 95, 95, 95, 105, 95, 105, 95, 0, 95, 105, 105, 0, 105, 105, 105, 105, 105, 95, 0, 105, 105, 105, 105, 105, 0, 105, 105, 105, 105, 105, 0, 125, 125, 0, 113, 113, 113, 125, 113, 125, 113, 0, 113, 125, 125, 0, 125, 125, 125, 125, 125, 113, 0, 125, 125, 125, 125, 125, 0, 125, 125, 125, 125, 125, 0, 0, 0, 0, 137, 137, 137, 0, 137, 0, 137, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 179, 179, 179, 179, 149, 177, 177, 177, 155, 0, 193, 193, 183, 0, 0, 0, 193, 193, 193, 193, 193, 0, 830, 239, 836, 239, 0, 217, 0, 243, 243, 243, 243, 243, 0, 217, 243, 1, 239, 5, 5, 584, 1091, 5, 587, 1091, 602, 1091, 5, 584, 5, 584, 602, 5, 590, 5, 5, 602, 1021, 239, 5, 5, 5, 5, 5, 5, 1021, 239, 5, 239, 239, 5, 0, 0, 13, 1037, 0, 15, 1037, 221, 1037, 0, 13, 0, 13, 221, 0, 17, 0, 0, 221, 836, 239, 0, 0, 0, 0, 0, 0, 836, 239, 0, 239, 239, 0, 0, 217, 0, 239, 836, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 836, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 836, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 836, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 217, 0, 239, 0, 239, 239, 239, 239, 0, 0, 241, 0, 241, 0, 241, 221, 241, 0, 0, 241, 0, 241, 0, 241, 221, 241, 0, 241, 221, 241, 0, 241, 0, 241, 0, 0, 0, 0, 251, 845, 251, 0, 251, 251, 251, 845, 245, 253, 1, 251, 5, 5, 5, 5, 251, 1025, 251, 5, 251, 251, 251, 1025, 327, 327, 327, 0, 0, 283, 301, 335, 1, 0, 0, 0, 0, 277, 335, 581, 5, 5, 5, 5, 620, 335, 965, 665, 665, 665, 665, 1096, 7, 668, 9, 9, 9, 9, 1029, 0, 443, 9, 9, 9, 9, 1029, 0, 1, 335, 333, 333, 0, 291, 291, 291, 333, 291, 333, 291, 0, 291, 333, 333, 0, 333, 333, 333, 333, 333, 291, 0, 291, 291, 333, 0, 333, 333, 333, 333, 0, 333, 333, 333, 333, 0, 0, 333, 0, 0, 0, 301, 0, 0, 333, 333, 333, 0, 0, 0, 791, 19, 1, 0, 0, 0, 0, 0, 0, 333, 333, 333, 0, 791, 19, 19, 19, 19, 19, 19, 0, 0, 329, 329, 329, 329, 0, 335, 297, 860, 0, 0, 860, 335, 335, 335, 335, 335, 0, 860, 0, 0, 860, 0, 333, 333, 333, 333, 333, 0, 860, 0, 0, 860, 0, 333, 333, 333, 333, 333, 0, 860, 0, 0, 860, 860, 333, 333, 333, 333, 333, 0, 860, 0, 0, 860, 860, 333, 333, 333, 333, 333, 0, 0, 0, 299, 0, 0, 331, 1, 331, 5, 5, 623, 5, 5, 331, 0, 357, 357, 345, 0, 0, 0, 357, 357, 357, 357, 357, 0, 415, 415, 415, 415, 415, 365, 0, 413, 0, 413, 0, 413, 415, 415, 415, 415, 415, 0, 0, 417, 1, 0, 0, 0, 0, 0, 417, 581, 5, 5, 5, 5, 5, 417, 965, 665, 665, 665, 665, 665, 7, 668, 9, 9, 9, 9, 9, 0, 668, 9, 9, 1033, 9, 9, 0, 443, 9, 9, 9, 9, 9, 0, 361, 417, 1, 417, 0, 0, 37, 815, 0, 425, 419, 425, 433, 433, 1, 433, 0, 0, 43, 0, 43, 0, 431, 0, 0, 0, 435, 647, 1009, 7, 701, 0, 0, 439, 479, 427, 427, 437, 1, 439, 0, 439, 49, 49, 446, 49, 0, 43, 43, 0, 51, 0, 0, 0, 55, 0, 0, 45, 57, 0, 53, 53, 53, 53, 53, 53, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 569, 509, 0, 527, 0, 527, 527, 515, 515, 515, 515, 0, 0, 0, 941, 521, 909, 909, 909, 909, 0, 0, 0, 0, 909, 1051, 933, 1041, 1041, 1041, 1041, 0, 0, 0, 909, 909, 909, 43, 0, 515, 515, 515, 0, 0, 0, 515, 515, 515, 0, 0, 925, 917, 917, 917, 917, 0, 0, 917, 917, 917, 43, 0, 1, 917, 917, 917, 917, 0, 0, 0, 0, 0, 0, 0, 551, 0, 0, 0, 551, 0, 0, 0, 551, 0, 0, 0, 551, 545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563, 0, 0, 563, 0, 563, 0, 0, 0, 0, 0, 0, 0, 563, 0, 563, 563, 0, 949, 0, 0, 0, 0, 0, 563, 0, 0, 0, 0, 0, 0, 563, 0, 563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563, 0, 563, 563, 0, 0, 0, 0, 557, 539, 0, 0, 0, 533, 533, 67, 67, 449, 67, 43, 43, 69, 0, 0, 63, 73, 0, 71, 71, 71, 71, 71, 71, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 572, 512, 0, 530, 0, 530, 530, 518, 518, 518, 518, 0, 0, 0, 945, 524, 913, 913, 913, 913, 0, 0, 0, 0, 913, 1056, 937, 1046, 1046, 1046, 1046, 0, 0, 0, 913, 913, 913, 43, 0, 518, 518, 518, 0, 0, 0, 518, 518, 518, 0, 0, 929, 921, 921, 921, 921, 0, 0, 921, 921, 921, 43, 0, 1, 921, 921, 921, 921, 0, 0, 0, 0, 0, 0, 0, 554, 0, 0, 0, 554, 0, 0, 0, 554, 0, 0, 0, 554, 548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0, 0, 566, 0, 566, 0, 0, 0, 0, 0, 0, 0, 566, 0, 566, 566, 0, 953, 0, 0, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0, 566, 0, 566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 566, 0, 566, 566, 0, 0, 0, 0, 560, 542, 0, 0, 0, 536, 536, 79, 79, 452, 79, 0, 0, 0, 81, 0, 0, 0, 83, 85, 85, 85, 575, 87, 87, 455, 87, 0, 89, 91, 91, 905, 91, 578, 97, 97, 458, 97, 43, 99, 0, 0, 93, 103, 0, 101, 101, 101, 101, 101, 101, 0, 107, 107, 461, 107, 109, 115, 115, 464, 115, 0, 43, 0, 117, 0, 0, 0, 121, 0, 0, 111, 123, 0, 119, 119, 119, 119, 119, 119, 0, 127, 127, 467, 127, 0, 0, 129, 0, 0, 0, 131, 0, 0, 133, 0, 0, 135, 0, 0, 0, 0, 139, 139, 139, 139, 139, 139, 0, 143, 143, 143, 143, 143, 0, 141, 141, 141, 141, 141, 0, 159, 159, 1, 159, 0, 0, 0, 43, 43, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 157, 824, 151, 157, 827, 0, 0, 0, 173, 593, 151, 151, 151, 169, 969, 7, 671, 0, 175, 175, 0, 149, 149, 149, 175, 149, 175, 149, 0, 149, 175, 175, 0, 0, 167, 167, 167, 167, 167, 167, 0, 0, 169, 151, 169, 151, 169, 151, 169, 153, 171, 151, 0, 169, 151, 169, 0, 151, 151, 175, 151, 169, 151, 169, 147, 147, 147, 181, 181, 181, 181, 181, 824, 147, 147, 147, 0, 163, 163, 163, 163, 163, 824, 147, 147, 147, 0, 163, 163, 163, 163, 163, 824, 147, 147, 147, 0, 163, 163, 163, 163, 163, 824, 147, 147, 147, 821, 163, 163, 163, 163, 163, 824, 147, 147, 147, 0, 163, 163, 163, 163, 163, 824, 147, 147, 147, 821, 163, 163, 163, 163, 163, 824, 0, 175, 1, 175, 147, 147, 147, 0, 165, 165, 165, 165, 827, 147, 147, 147, 181, 181, 181, 181, 181, 827, 147, 147, 147, 0, 0, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 827, 147, 147, 147, 821, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 0, 165, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 161, 0, 161, 161, 161, 161, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 145, 165, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 821, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 147, 147, 147, 165, 0, 165, 165, 165, 165, 827, 151, 169, 187, 187, 0, 187, 0, 0, 0, 185, 185, 0, 185, 185, 185, 43, 0, 0, 0, 189, 973, 7, 674, 0, 0, 0, 0, 191, 191, 191, 191, 191, 0, 1, 191, 596, 199, 199, 1, 199, 0, 0, 0, 195, 0, 0, 0, 0, 195, 0, 0, 0, 0, 0, 197, 195, 195, 0, 0, 197, 0, 197, 0, 197, 0, 0, 0, 0, 207, 599, 195, 195, 195, 205, 977, 7, 677, 0, 195, 205, 195, 205, 195, 205, 195, 0, 205, 195, 205, 0, 195, 195, 209, 195, 205, 195, 205, 0, 0, 201, 201, 201, 201, 201, 0, 0, 704, 716, 0, 209, 1, 209, 0, 0, 203, 203, 203, 203, 203, 0, 195, 205, 225, 225, 1, 225, 839, 0, 836, 836, 0, 0, 221, 836, 0, 0, 0, 221, 0, 0, 0, 836, 0, 43, 43, 43, 0, 0, 836, 839, 836, 221, 223, 839, 839, 13, 1037, 0, 15, 1037, 221, 1037, 0, 13, 0, 13, 221, 0, 17, 0, 0, 221, 836, 235, 0, 0, 0, 0, 0, 0, 836, 235, 839, 235, 235, 0, 233, 233, 476, 233, 221, 221, 221, 213, 476, 221, 836, 221, 221, 221, 243, 476, 221, 221, 221, 243, 773, 476, 221, 833, 221, 221, 229, 476, 221, 221, 221, 243, 0, 233, 221, 233, 215, 231, 473, 219, 219, 227, 764, 0, 217, 0, 233, 233, 233, 233, 233, 0, 650, 476, 221, 221, 836, 221, 233, 608, 981, 7, 680, 0, 776, 476, 221, 836, 221, 221, 233, 221, 231, 836, 237, 836, 237, 470, 211, 211, 227, 1017, 237, 5, 5, 584, 1091, 5, 587, 1091, 602, 1091, 5, 584, 5, 584, 602, 5, 590, 5, 5, 602, 1021, 605, 5, 5, 5, 5, 5, 5, 1021, 605, 5, 605, 605, 5, 221, 237, 0, 237, 0, 237, 0, 237, 247, 247, 43, 247, 43, 43, 245, 845, 245, 43, 245, 245, 245, 845, 0, 0, 0, 0, 249, 845, 249, 0, 249, 249, 249, 845, 779, 0, 245, 0, 253, 253, 253, 253, 253, 845, 0, 245, 0, 249, 842, 249, 249, 249, 249, 845, 1, 249, 259, 259, 0, 259, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 261, 985, 7, 683, 0, 1, 263, 611, 255, 263, 653, 267, 267, 1, 267, 0, 0, 0, 265, 0, 0, 0, 0, 265, 0, 265, 265, 265, 851, 0, 0, 0, 271, 617, 989, 7, 686, 0, 275, 275, 275, 275, 275, 851, 1, 273, 614, 269, 848, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 848, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 848, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 848, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 269, 0, 269, 269, 269, 269, 851, 303, 303, 1, 303, 0, 0, 0, 43, 854, 0, 0, 854, 854, 0, 0, 43, 43, 0, 866, 43, 866, 866, 0, 0, 866, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 0, 866, 866, 301, 0, 301, 866, 301, 301, 863, 0, 0, 0, 323, 626, 301, 301, 325, 993, 7, 689, 0, 0, 0, 281, 309, 309, 309, 0, 0, 283, 0, 301, 319, 782, 854, 301, 307, 301, 335, 1, 0, 0, 301, 0, 0, 277, 319, 668, 9, 9, 9, 9, 1029, 0, 1, 0, 0, 0, 0, 277, 301, 319, 0, 325, 301, 325, 325, 325, 325, 279, 0, 287, 0, 291, 0, 287, 0, 0, 0, 291, 295, 0, 0, 0, 0, 0, 291, 291, 0, 0, 325, 325, 325, 0, 291, 289, 291, 313, 0, 313, 313, 313, 313, 313, 313, 0, 285, 313, 291, 313, 291, 313, 291, 0, 313, 291, 313, 291, 313, 291, 313, 0, 0, 0, 313, 313, 313, 313, 313, 0, 0, 707, 719, 0, 0, 0, 728, 0, 0, 734, 752, 758, 746, 740, 285, 313, 289, 313, 0, 0, 325, 794, 301, 325, 866, 301, 301, 325, 301, 0, 325, 293, 293, 293, 0, 0, 0, 315, 317, 317, 317, 317, 317, 0, 860, 0, 0, 860, 335, 335, 335, 335, 335, 0, 11, 0, 710, 722, 0, 0, 0, 731, 0, 737, 755, 749, 743, 860, 0, 0, 860, 0, 325, 325, 325, 325, 325, 0, 860, 0, 0, 860, 0, 325, 325, 325, 325, 325, 0, 767, 1, 325, 21, 21, 860, 0, 0, 860, 21, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 863, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 860, 321, 21, 321, 321, 321, 321, 863, 860, 0, 0, 860, 335, 335, 335, 335, 335, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 863, 21, 321, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 857, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 857, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 860, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 857, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 857, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 21, 21, 860, 0, 0, 860, 21, 321, 863, 321, 21, 321, 321, 321, 321, 863, 656, 301, 0, 325, 339, 339, 1, 339, 0, 0, 0, 0, 337, 0, 0, 0, 341, 632, 997, 7, 692, 0, 1, 343, 629, 351, 351, 1, 351, 0, 347, 0, 347, 0, 349, 349, 0, 349, 349, 349, 43, 0, 0, 0, 353, 638, 1001, 7, 695, 0, 0, 0, 0, 355, 355, 355, 355, 355, 0, 1, 355, 635, 385, 385, 1, 385, 0, 0, 0, 43, 899, 0, 0, 0, 0, 379, 0, 0, 0, 0, 381, 0, 0, 0, 377, 43, 890, 890, 0, 0, 373, 899, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 902, 383, 383, 0, 383, 363, 899, 0, 890, 893, 0, 0, 0, 409, 644, 371, 371, 405, 1005, 7, 698, 0, 411, 411, 0, 365, 365, 365, 411, 365, 411, 365, 0, 365, 411, 411, 0, 0, 395, 395, 395, 395, 395, 395, 0, 375, 417, 899, 367, 375, 403, 785, 788, 899, 375, 401, 375, 359, 403, 0, 397, 379, 407, 0, 0, 0, 0, 33, 0, 0, 812, 0, 812, 0, 33, 1086, 33, 812, 812, 33, 1086, 33, 812, 812, 33, 1086, 0, 35, 35, 0, 1013, 0, 35, 35, 0, 1013, 35, 35, 1013, 0, 488, 497, 43, 0, 485, 0, 494, 500, 491, 29, 806, 806, 29, 1076, 0, 35, 35, 0, 1013, 0, 35, 35, 0, 1013, 25, 800, 800, 25, 1066, 27, 803, 803, 27, 1071, 23, 797, 797, 23, 23, 23, 1061, 0, 35, 35, 0, 0, 0, 1013, 0, 35, 35, 0, 0, 0, 1013, 31, 809, 809, 31, 1081, 31, 809, 809, 31, 1081, 367, 407, 899, 0, 403, 371, 403, 0, 369, 371, 407, 371, 403, 371, 899, 403, 0, 411, 411, 411, 411, 411, 0, 896, 0, 896, 417, 417, 417, 417, 417, 890, 0, 713, 725, 761, 896, 0, 896, 890, 393, 393, 393, 393, 393, 890, 896, 0, 896, 890, 393, 393, 393, 393, 393, 890, 896, 0, 896, 890, 393, 393, 393, 393, 393, 890, 896, 0, 896, 887, 393, 393, 393, 393, 393, 890, 896, 0, 896, 890, 393, 393, 393, 393, 393, 890, 896, 0, 896, 887, 393, 393, 393, 393, 393, 890, 770, 1, 411, 641, 896, 896, 0, 399, 399, 399, 399, 893, 896, 896, 417, 417, 417, 417, 417, 893, 896, 896, 0, 0, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 893, 896, 896, 887, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 0, 399, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 872, 399, 399, 399, 399, 893, 896, 896, 399, 878, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 878, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 881, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 878, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 878, 399, 399, 399, 399, 893, 1, 0, 896, 0, 0, 896, 0, 391, 391, 0, 391, 391, 391, 391, 893, 668, 9, 9, 1033, 9, 9, 0, 896, 896, 399, 0, 869, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 387, 0, 387, 387, 387, 387, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 884, 399, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 878, 0, 399, 399, 399, 399, 893, 896, 896, 399, 878, 399, 399, 399, 399, 893, 896, 896, 399, 887, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 887, 399, 399, 399, 399, 893, 896, 896, 399, 878, 399, 399, 399, 399, 893, 896, 896, 399, 875, 878, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 881, 399, 399, 399, 399, 893, 896, 896, 399, 887, 399, 399, 399, 399, 893, 896, 896, 399, 884, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 887, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 875, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 887, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 881, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 887, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 884, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 872, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 875, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 875, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 875, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 0, 399, 399, 399, 399, 893, 896, 896, 399, 884, 399, 399, 399, 399, 893, 659, 375, 899, 405, 662, 43, 43, 37, 815, 43, 421, 0, 0, 37, 815, 0, 423, 419, 423, 441, 441, 441, 441, 441, 441, 441, 441, 441, 441, 61, 61, 61, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 77, 77, 77, 77, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 105, 105, 105, 105, 125, 125, 125, 125, 179, 177, 193, 193, 193, 239, 239, 243, 243, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 251, 253, 251, 251, 327, 335, 335, 335, 335, 335, 335, 335, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 329, 335, 335, 333, 333, 333, 333, 331, 331, 331, 357, 357, 357, 415, 413, 413, 413, 415, 417, 417, 417, 417, 417, 417, 417, 417, 417, 425, 425, 435, 647, 1009, 701, 439, 437, 439, 439, 55, 57, 53, 53, 957, 569, 509, 527, 527, 527, 515, 515, 941, 521, 909, 909, 909, 1051, 933, 1041, 1041, 909, 515, 515, 925, 917, 917, 917, 917, 917, 551, 551, 551, 551, 545, 563, 563, 563, 563, 949, 563, 563, 563, 563, 503, 563, 563, 563, 563, 563, 563, 557, 539, 533, 533, 73, 71, 71, 961, 572, 512, 530, 530, 530, 518, 518, 945, 524, 913, 913, 913, 1056, 937, 1046, 1046, 913, 518, 518, 929, 921, 921, 921, 921, 921, 554, 554, 554, 554, 548, 566, 566, 566, 566, 953, 566, 566, 566, 566, 506, 566, 566, 566, 566, 566, 566, 560, 542, 536, 536, 83, 85, 91, 103, 101, 101, 121, 123, 119, 119, 131, 135, 139, 139, 143, 141, 173, 593, 169, 969, 671, 175, 167, 167, 169, 169, 169, 169, 171, 169, 169, 175, 169, 169, 181, 163, 163, 163, 163, 163, 163, 175, 175, 165, 181, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 161, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 169, 189, 973, 674, 191, 191, 596, 207, 599, 205, 977, 677, 205, 205, 205, 205, 205, 209, 205, 205, 201, 704, 716, 209, 209, 203, 205, 235, 233, 243, 243, 773, 229, 243, 233, 233, 231, 227, 764, 233, 650, 233, 608, 981, 680, 776, 233, 231, 237, 237, 227, 237, 605, 237, 237, 237, 237, 249, 779, 253, 249, 249, 261, 985, 683, 263, 611, 263, 653, 271, 617, 989, 686, 275, 273, 614, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 323, 626, 325, 993, 689, 311, 309, 319, 782, 307, 335, 319, 305, 319, 325, 325, 325, 325, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 707, 719, 728, 734, 752, 758, 746, 740, 313, 313, 325, 794, 325, 325, 325, 315, 317, 335, 710, 722, 731, 737, 755, 749, 743, 325, 325, 767, 325, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 335, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321, 656, 325, 341, 632, 997, 692, 343, 629, 353, 638, 1001, 695, 355, 355, 635, 409, 644, 405, 1005, 698, 411, 395, 395, 417, 403, 785, 788, 401, 403, 397, 407, 1086, 1086, 1086, 1013, 1013, 1013, 488, 497, 485, 494, 500, 491, 1076, 1013, 1013, 1066, 1071, 1061, 1013, 1013, 1081, 1081, 407, 403, 403, 407, 403, 403, 411, 417, 713, 725, 761, 393, 393, 393, 393, 393, 393, 770, 411, 641, 399, 417, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 391, 389, 399, 399, 387, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, 659, 405, 662, 423, 423, 0 , 0 ];
static _lexer_to_state_actions: [i8 ; 838] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 39, 0, 39, 0, 0, 0, 39, 39, 0, 0, 0, 0, 39, 0, 39, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0 , 0 ];
static _lexer_from_state_actions: [i8 ; 838] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 41, 0, 41, 0, 0, 0, 41, 41, 0, 0, 0, 0, 41, 0, 41, 0, 41, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0 , 0 ];
static _lexer_eof_cond_spaces: [i8 ; 838] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _lexer_eof_cond_key_offs: [i8 ; 838] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_eof_cond_key_lens: [i8 ; 838] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_eof_cond_keys: [i8 ; 2] = [ 0 , 0 ];
static _lexer_eof_trans: [i16 ; 838] = [ 0, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 0, 0, 0, 0, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 0, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 0, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 0, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 0, 6401, 6402, 0, 6403, 0, 6404, 6405, 6406, 0, 0, 6407, 6408, 6409, 6410, 0, 6411, 0, 6412, 0, 6413, 6414, 6415, 6416, 0, 6417, 6418, 6419, 6420, 6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480, 6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 0, 6529, 6530, 6531, 6532, 6533, 6534, 0, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 0, 6555, 6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 0, 6585, 6586, 6587, 6588, 6589, 0, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 0, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 0, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 0, 6765, 6766, 6767, 6768, 6769, 6770, 0, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 0, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 0, 6941, 6942, 0 , 0 ];
static _lexer_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _lexer_nfa_offsets: [i8 ; 838] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _lexer_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _lexer_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static lexer_start : i32 = 154;
static lexer_error : i32 = 0;
pub static lexer_en_interp_words : i32 = 163;
pub static lexer_en_interp_string : i32 = 219;
pub static lexer_en_plain_words : i32 = 274;
pub static lexer_en_plain_string : i32 = 277;
pub static lexer_en_interp_backslash_delimited : i32 = 279;
pub static lexer_en_plain_backslash_delimited : i32 = 283;
pub static lexer_en_interp_backslash_delimited_words : i32 = 284;
pub static lexer_en_plain_backslash_delimited_words : i32 = 289;
pub static lexer_en_regexp_modifiers : i32 = 291;
pub static lexer_en_expr_variable : i32 = 293;
pub static lexer_en_expr_fname : i32 = 298;
pub static lexer_en_expr_endfn : i32 = 411;
pub static lexer_en_expr_dot : i32 = 418;
pub static lexer_en_expr_arg : i32 = 439;
pub static lexer_en_expr_cmdarg : i32 = 470;
pub static lexer_en_expr_endarg : i32 = 476;
pub static lexer_en_expr_mid : i32 = 484;
pub static lexer_en_expr_beg : i32 = 508;
pub static lexer_en_expr_labelarg : i32 = 654;
pub static lexer_en_expr_value : i32 = 661;
pub static lexer_en_expr_end : i32 = 669;
pub static lexer_en_leading_dot : i32 = 833;
pub static lexer_en_line_begin : i32 = 154;
pub struct Lexer {
	input: String,
	
	// ragel
	pub cs: i32,
	p: i32,
	pe: i32,
	ts: i32,
	te: i32,
	tm: i32,
	act: i32,
	stack: [i32; 16],
	top: i32,
	
	pub cond: StackState,
	pub cmdarg: StackState,
	// TODO
	// @cond_stack   = []
	// @cmdarg_stack = []
	
	// # Lexer state:
	// @token_queue   = []
	// @literal_stack = []
	tokens: Rc<RefCell<Vec<Token>>>,
	pub literal_stack: Vec<RefCell<Literal>>,
	
	// @eq_begin_s    = nil # location of last encountered =begin
	// @sharp_s       = nil # location of last encountered #
	
	// @newline_s     = nil # location of last encountered newline
	
	// @num_base      = nil # last numeric base
	// @num_digits_s  = nil # starting position of numeric digits
	// @num_suffix_s  = nil # starting position of numeric suffix
	// @num_xfrm      = nil # numeric suffix-induced transformation
	// TODO Do we need Optional for these values?
	num_base: usize,
	num_digits_s: i32,
	num_suffix_s: i32,
	
	// @escape_s      = nil # starting position of current sequence
	// @escape        = nil # last escaped sequence, as string
	
	// @herebody_s    = nil # starting position of current heredoc line
	
	// # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
	// # encountered after a matching closing parenthesis.
	// @paren_nest    = 0
	paren_nest: usize,
	// @lambda_stack  = [],
	lambda_stack: Vec<usize>,
	
	// # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
	// # we store the indentation level and give it out to the parser
	// # on request. It is not possible to infer indentation level just
	// # from the AST because escape sequences such as `\ ` or `\t` are
	// # expanded inside the lexer, but count as non-whitespace for
	// # indentation purposes.
	// @dedent_level  = nil
	pub dedent_level: Option<isize>,
	
	// # If the lexer is in `command state' (aka expr_value)
	// # at the entry to #advance, it will transition to expr_cmdarg
	// # instead of expr_arg at certain points.
	// @command_state = false
	command_state: bool,
	
	// # True at the end of "def foo a:"
	// @in_kwarg      = false
	pub in_kwarg: bool,
	
	// # State before =begin / =end block comment
	// @cs_before_block_comment = self.class.lex_en_line_begin
}

impl Lexer {
	pub fn new(input: String) -> Lexer {
		// %% write init;
		let cs = ( lexer_start ) as i32;
		let top=0;
		let ts=0;
		let te=0;
		let act=0;
		
		let tm=0;
		let pe = input.len() as i32;
		let stack = [0; 16];
		
		Lexer {
			input,
			
			cs, ts, te, tm,
			stack, top,
			p: 0,
			pe,
			act,
			
			cond: StackState::new(),
			cmdarg: StackState::new(),
			
			tokens: Rc::new(RefCell::new(vec![])),
			literal_stack: vec![],
			
			num_base: 0,
			num_digits_s: 0,
			num_suffix_s: 0,
			
			paren_nest: 0,
			lambda_stack: vec![],
			
			dedent_level: None,
			command_state: false,
			
			in_kwarg: false
		}
	}
	
	// TODO DOC
	// return a Token
	#[allow(unused_parens, unused_assignments, unused_variables)]
	pub fn advance(&mut self) -> Option<Token> {
		explain!("lexer:advance: current_state: {}", state_name_from_id(self.cs));
		
		if !self.tokens.borrow().is_empty() { return Some(self.tokens.borrow_mut().remove(0)); }
		
		// TODO MAJOR utf8 uncompatible
		let _input = self.input.clone();
		let data = _input.as_bytes();
		
		// TODO macro
		let mut p = self.p;
		let mut pe = self.pe;
		let mut ts = self.ts;
		let mut te = self.te;
		let mut tm = self.tm;
		let mut act = self.act;
		let mut stack = self.stack;
		let mut top = self.top;
		
		// NOTE
		// pe - Data end pointer.
		// This should be initialized to p plus the data length on every run of the machine.
		// In Go, Java and Ruby code this should be initialized to the data length.
		// Seems like rust is same with ruby, since they're languages without `goto`
		
		let eof = self.pe;
		
		// @command_state = (@cs == klass.lex_en_expr_value ||
		//                   @cs == klass.lex_en_line_begin)
		self.command_state = ( self.cs == lexer_en_expr_value || self.cs == lexer_en_line_begin );
		
		
		{
			let mut _trans  = 0;
			let mut _have  = 0;
			let mut _cont  = 1;
			let mut _klen = 0;
			let mut _cpc = 0;
			let mut _keys :i32= 0;
			let mut _acts :i32= 0;
			let mut _nacts = 0;
			let mut _cekeys :i32= 0;
			while ( _cont == 1  )
			{
			
				if ( (self.cs) == 0  ) {
					_cont = 0;
					
				}
				_have = 0;
				if ( p == pe  ) {
					{
						if ( p == eof  ) {
							{
								let mut _eofcont  = 0;
								if ( _lexer_eof_cond_spaces[((self.cs)) as usize]!= -1  ) {
									{
										_cekeys = ( _lexer_eof_cond_key_offs[((self.cs)) as usize] ) as i32;
										_klen = ( _lexer_eof_cond_key_lens[((self.cs)) as usize] ) as i32;
										_cpc = 0;
										{
											let mut _lower  :i32= _cekeys;
											let mut _upper  :i32= _cekeys + _klen - 1;
											let mut _mid :i32= 0;
											while ( _eofcont == 0 && _lower <= _upper  )
											{
												_mid = _lower + ((_upper-_lower) >> 1);
												if ( _cpc < ( _lexer_eof_cond_keys[(_mid ) as usize]
												) as i32 ) {
													_upper = _mid - 1;
													
												}
												else if ( _cpc > ( _lexer_eof_cond_keys[(_mid ) as usize]
												) as i32 ) {
													_lower = _mid + 1;
													
												}
												else {
													{
														_eofcont = 1;
													}
													
												}
											}
											
											if ( _eofcont == 0  ) {
												{
													(self.cs) = 0;
												}
												
											}
										}
									}
									
								}
								else {
									{ _eofcont = 1;
									}
									
								}
								if ( _eofcont == 1  ) {
									{
									}
									
								}
								if ( _eofcont == 1  ) {
									{
										if ( _lexer_eof_trans[((self.cs)) as usize]> 0  ) {
											{
												_trans = ( _lexer_eof_trans[((self.cs)) as usize] ) as u32- 1;
												_have = 1;
											}
											
										}
									}
									
								}
							}
							
						}
						if ( _have == 0  ) {
							_cont = 0;
							
						}
					}
					
				}
				if ( _cont == 1  ) {
					{
						if ( _have == 0  ) {
							{
								_acts = ( _lexer_from_state_actions[((self.cs)) as usize] ) as i32;
								_nacts = ( _lexer_actions[(_acts ) as usize]
								) as u32;
								_acts += 1;
								while ( _nacts > 0  )
								{
									match ( _lexer_actions[(_acts ) as usize]
									) {
										57  => {
											{{ts = p;
												}}
											
										}
										
										_ => {}
									}
									_nacts -= 1;
									_acts += 1;
								}
								
								
								_keys = ( _lexer_key_offsets[((self.cs)) as usize] ) as i32;
								_trans = ( _lexer_index_offsets[((self.cs)) as usize] ) as u32;
								_have = 0;
								_klen = ( _lexer_single_lengths[((self.cs)) as usize] ) as i32;
								if ( _klen > 0  ) {
									{
										let mut _lower  :i32= _keys;
										let mut _upper  :i32= _keys + _klen - 1;
										let mut _mid :i32= 0;
										while ( _upper >= _lower && _have == 0  )
										{
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[(p ) as usize]
											) < _lexer_trans_keys[(_mid ) as usize]
											) {
												_upper = _mid - 1;
												
											}
											else if ( ( data[(p ) as usize]
											) > _lexer_trans_keys[(_mid ) as usize]
											) {
												_lower = _mid + 1;
												
											}
											else {
												{
													_trans += ( (_mid - _keys) ) as u32;
													_have = 1;
												}
												
											}
										}
										
										if ( _have == 0  ) {
											{
												_keys += _klen;
												_trans += ( _klen ) as u32;
											}
											
										}
									}
									
									
								}
								if ( _have == 0  ) {
									{
										_klen = ( _lexer_range_lengths[((self.cs)) as usize] ) as i32;
										if ( _klen > 0  ) {
											{
												let mut _lower  :i32= _keys;
												let mut _mid :i32= 0;
												let mut _upper  :i32= _keys + (_klen<<1) - 2;
												while ( _have == 0 && _lower <= _upper  )
												{
													_mid = _lower + (((_upper-_lower) >> 1) & !1
													);
													if ( ( data[(p ) as usize]
													) < _lexer_trans_keys[(_mid ) as usize]
													) {
														_upper = _mid - 2;
														
													}
													else if ( ( data[(p ) as usize]
													) > _lexer_trans_keys[(_mid + 1 ) as usize]
													) {
														_lower = _mid + 2;
														
													}
													else {
														{
															_trans += ( ((_mid - _keys)>>1) ) as u32;
															_have = 1;
														}
														
													}
												}
												
												if ( _have == 0  ) {
													_trans += ( _klen ) as u32;
													
												}
											}
											
										}
									}
									
									
								}
							}
							
						}
						if ( _cont == 1  ) {
							{
								(self.cs) = ( _lexer_cond_targs[(_trans) as usize] ) as i32;
								if ( _lexer_cond_actions[(_trans) as usize]!= 0  ) {
									{
										_acts = ( _lexer_cond_actions[(_trans) as usize] ) as i32;
										_nacts = ( _lexer_actions[(_acts ) as usize]
										) as u32;
										_acts += 1;
										while ( _nacts > 0  )
										{
											match ( _lexer_actions[(_acts ) as usize]
											) {
												0  => {
													{panic!("UNIMPL");
														// # Record position of a newline for precise location reporting on tNL
														// # tokens.
														// #
														// # This action is embedded directly into c_nl, as it is idempotent and
														// # there are no cases when we need to skip it.
														// @newline_s = p
													}
													
												}
												1  => {
													{}
													
												}
												2  => {
													{}
													
												}
												3  => {
													{}
													
												}
												4  => {
													{}
													
												}
												5  => {
													{}
													
												}
												6  => {
													{}
													
												}
												7  => {
													{}
													
												}
												8  => {
													{}
													
												}
												9  => {
													{}
													
												}
												10  => {
													{}
													
												}
												11  => {
													{}
													
												}
												12  => {
													{}
													
												}
												13  => {
													{}
													
												}
												14  => {
													{}
													
												}
												15  => {
													{}
													
												}
												16  => {
													{}
													
												}
												17  => {
													{}
													
												}
												18  => {
													{}
													
												}
												19  => {
													{}
													
												}
												20  => {
													{}
													
												}
												21  => {
													{}
													
												}
												22  => {
													{}
													
												}
												23  => {
													{}
													
												}
												24  => {
													{}
													
												}
												25  => {
													{panic!("UNIMPL");
														// # After every heredoc was parsed, @herebody_s contains the
														// # position of next token after all heredocs.
														// if @herebody_s
														//   p = @herebody_s
														//   @herebody_s = nil
														// end
													}
													
												}
												26  => {
													{self.cond.push(false); self.cmdarg.push(false);
														
														if let Some(literal) = self.literal_stack.last() {
															let mut literal = literal.borrow_mut();
															
															literal.start_interp_brace()
														}
													}
													
												}
												27  => {
													{let literal_stack_is_empty = self.literal_stack.is_empty();
														if !literal_stack_is_empty {
															let mut literal = self.literal_stack.last().unwrap().borrow_mut().clone();
															if !literal.end_interp_brace_and_try_closing() {
																// IGNORED ruby1819
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DEND;
																	self.emit(token);
																}
																
																
																// TODO herebody
																
																{p = p - 1;
																}
																{(self.cs) = (self.next_state_for_literal(&literal));
																}
																{p+= 1;
																	_cont = 0;
																}
															}
														}
													}
													
												}
												28  => {
													{panic!("UNIMPL");
														// @sharp_s = p - 1
													}
													
												}
												29  => {
													{panic!("UNIMPL");
														// emit_comment(@sharp_s, p == pe ? p - 2 : p)
													}
													
												}
												30  => {
													{tm = p }
													
												}
												31  => {
													{tm = p - 2 }
													
												}
												32  => {
													{tm = p }
													
												}
												33  => {
													{tm = p - 2 }
													
												}
												34  => {
													{tm = p - 2 }
													
												}
												35  => {
													{tm = p - 2 }
													
												}
												36  => {
													{tm = p - 3 }
													
												}
												37  => {
													{tm = p - 2 }
													
												}
												38  => {
													{tm = p - 2 }
													
												}
												39  => {
													{self.cond.push(false); self.cmdarg.push(false);
													}
													
												}
												40  => {
													{self.cond.push(false); self.cmdarg.push(false);
														
														self.paren_nest += 1;
													}
													
												}
												41  => {
													{self.paren_nest -= 1;
													}
													
												}
												42  => {
													{tm = p }
													
												}
												43  => {
													{tm = p }
													
												}
												44  => {
													{tm = p }
													
												}
												45  => {
													{let heredoc_e      = p; }
													
												}
												46  => {
													{let new_herebody_s = p; }
													
												}
												47  => {
													{let ident_tok = self.current_slice(ts, te); let ident_ts = ts; let ident_te = te; }
													
												}
												48  => {
													{self.num_base = 16; self.num_digits_s = p }
													
												}
												49  => {
													{self.num_base = 10; self.num_digits_s = p }
													
												}
												50  => {
													{self.num_base = 8;  self.num_digits_s = p }
													
												}
												51  => {
													{self.num_base = 2;  self.num_digits_s = p }
													
												}
												52  => {
													{self.num_base = 10; self.num_digits_s = ts }
													
												}
												53  => {
													{self.num_base = 8;  self.num_digits_s = ts }
													
												}
												54  => {
													{self.num_suffix_s = p }
													
												}
												55  => {
													{tm = p }
													
												}
												58  => {
													{{te = p+1;
														}}
													
												}
												59  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												60  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												61  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												62  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												63  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												64  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												65  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												66  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												67  => {
													{{p = ((te))-1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												68  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												69  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												70  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												71  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												72  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												73  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												74  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												75  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												76  => {
													{{p = ((te))-1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												77  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												78  => {
													{{te = p+1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												79  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												80  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												81  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												82  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												83  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												84  => {
													{{te = p+1;
															{panic!("UNIMPL");
																
																// TODO
																// current_literal = literal
																// # Get the first character after the backslash.
																// escaped_char = @source_buffer.slice(@escape_s).chr
																
																// if current_literal.munge_escape? escaped_char
																//   # If this particular literal uses this character as an opening
																//   # or closing delimiter, it is an escape sequence for that
																//   # particular character. Write it without the backslash.
																
																//   if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
																//     # Regular expressions should include escaped delimiters in their
																//     # escaped form, except when the escaped character is
																//     # a closing delimiter but not a regexp metacharacter.
																//     #
																//     # The backslash itself cannot be used as a closing delimiter
																//     # at the same time as an escape symbol, but it is always munged,
																//     # so this branch also executes for the non-closing-delimiter case
																//     # for the backslash.
																//     current_literal.extend_string(tok, @ts, @te)
																//   else
																//     current_literal.extend_string(escaped_char, @ts, @te)
																//   end
																// else
																//   # It does not. So this is an actual escape sequence, yay!
																//   if current_literal.regexp?
																//     # Regular expressions should include escape sequences in their
																//     # escaped form. On the other hand, escaped newlines are removed.
																//     current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//   elsif current_literal.heredoc? && escaped_char == "\n".freeze
																//     if current_literal.squiggly_heredoc?
																//       # Squiggly heredocs like
																//       #   <<~-HERE
																//       #     1\
																//       #     2
																//       #   HERE
																//       # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
																//       # This information is emitted as is, without escaping,
																//       # later this escape sequence (\\n) gets handled manually in the Lexer::Dedenter
																//       current_literal.extend_string(tok, @ts, @te)
																//     else
																//       # Plain heredocs also parse \\n as a line continuation,
																//       # but they don't need to know that there was originally a newline in the
																//       # code, so we escape it and emit as "  1  2\n"
																//       current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
																//     end
																//   else
																//     current_literal.extend_string(@escape || tok, @ts, @te)
																//   end
																// end
															}
														}}
													
												}
												85  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												86  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												87  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												88  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												89  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												90  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												91  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												92  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												93  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												94  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												95  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												96  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												97  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut();
																literal.flush_string();
																literal.extend_content();
																
																// TODO heredoc
																
																panic!("WIP");
															}
														}}
													
												}
												98  => {
													{{te = p+1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												99  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												100  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												101  => {
													{{te = p;
															p = p - 1;
															{let mut literal = self.literal_stack.last().expect("unexpected empty literal stack").borrow_mut().clone();
																literal.flush_string();
																literal.extend_content();
																
																
																{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STRING_DVAR;
																	self.emit(token);
																}
																
																
																self.literal_stack.last().expect("unexpected empty literal stack").replace(literal);
																
																p = ts;
																{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												102  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												103  => {
													{{te = p;
															p = p - 1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												104  => {
													{{p = ((te))-1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												105  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// current_literal = literal
																// if @te == pe
																//   diagnostic :fatal, :string_eof, nil,
																//               range(current_literal.str_s, current_literal.str_s + 1)
																// end
																
																// if current_literal.heredoc?
																//   line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)
																
																//   if version?(18, 19, 20)
																//     # See ruby:c48b4209c
																//     line = line.gsub(/\r.*$/, ''.freeze)
																//   end
																
																//   # Try ending the heredoc with the complete most recently
																//   # scanned line. @herebody_s always refers to the start of such line.
																//   if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
																//     # Adjust @herebody_s to point to the next line.
																//     @herebody_s = @te
																
																//     # Continue regular lexing after the heredoc reference (<<END).
																//     p = current_literal.heredoc_e - 1
																//     fnext *pop_literal; fbreak;
																//   else
																//     # Calculate indentation level for <<~HEREDOCs.
																//     current_literal.infer_indent_level(line)
																
																//     # Ditto.
																//     @herebody_s = @te
																//   end
																// else
																//   # Try ending the literal with a newline.
																//   if current_literal.nest_and_try_closing(tok, @ts, @te)
																//     fnext *pop_literal; fbreak;
																//   end
																
																//   if @herebody_s
																//     # This is a regular literal intertwined with a heredoc. Like:
																//     #
																//     #     p <<-foo+"1
																//     #     bar
																//     #     foo
																//     #     2"
																//     #
																//     # which, incidentally, evaluates to "bar\n1\n2".
																//     p = @herebody_s - 1
																//     @herebody_s = nil
																//   end
																// end
																
																// if current_literal.words? && !eof_codepoint?(@source_pts[p])
																//   current_literal.extend_space @ts, @te
																// else
																//   # A literal newline is appended if the heredoc was _not_ closed
																//   # this time (see fbreak above). See also Literal#nest_and_try_closing
																//   # for rationale of calling #flush_string here.
																//   current_literal.extend_string tok, @ts, @te
																//   current_literal.flush_string
																// end
															}
														}}
													
												}
												106  => {
													{{te = p+1;
															{println!("action:extend_string invoking");
																
																let temp_string = self.current_slice(ts, te);
																// NOTE ignored ruby22-and-below cases
																// TODO INCOMPLETE handle @cond.active
																let lookahead = self.current_slice(te, te + 2);
																
																// NOTE clone one, and replace it later
																let mut current_literal = self.literal_stack.last().unwrap().borrow_mut().clone();
																if !current_literal.is_heredoc() {
																	if let Some(token) = current_literal.nest_and_try_closing(&temp_string, ts, te, Some(lookahead)) {
																		if let Token::T_LABEL_END = token {
																			p += 1;
																			self.pop_literal();
																			{(self.cs) = 654;
																			}} else {
																			{(self.cs) = (self.pop_literal());
																			}
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																}
																
																current_literal.extend_string(&temp_string, ts, te);
																
																self.literal_stack.last().unwrap().replace(current_literal);
															}
														}}
													
												}
												107  => {
													{{te = p;
															p = p - 1;
															{self.literal_stack.last().unwrap().borrow_mut().extend_space(ts, te);
															}
														}}
													
												}
												108  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
																// fhold;
																// fgoto expr_end;
															}
														}}
													
												}
												109  => {
													{{te = p;
															p = p - 1;
															{panic!("UNIMPL");
																// unknown_options = tok.scan(/[^imxouesn]/)
																// if unknown_options.any?
																//   diagnostic :error, :regexp_options,
																//               { :options => unknown_options.join }
																// end
																//
																// emit(:tREGEXP_OPT)
																//
																// fnext expr_end;
																// fbreak;
															}
														}}
													
												}
												110  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_GVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												111  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_GVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												112  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												113  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IVAR(slice);
																	self.emit(token);
																}
																
																
																{
																	top -= 1;
																	let _poped_next_state = stack[top as usize];
																	{(self.cs) = (_poped_next_state);
																	}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												114  => {
													{{act = 39;
														}}
													
												}
												115  => {
													{{act = 40;
														}}
													
												}
												116  => {
													{{act = 41;
														}}
													
												}
												117  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												118  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												119  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 669;
																}{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												120  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												121  => {
													{{te = p+1;
															{{p = p - 1;
																} {p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												122  => {
													{{te = p+1;
															{panic!("UNIMPL");
																// if version?(23)
																//   type, delimiter = tok[0..-2], tok[-1].chr
																//   fgoto *push_literal(type, delimiter, @ts);
																// else
																//   p = @ts - 1
																//   fgoto expr_end;
																// end
															}
														}}
													
												}
												123  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												124  => {
													{{te = p+1;
															{}
														}}
													
												}
												125  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												126  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												127  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												128  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 669;
																}{stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												129  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												130  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												131  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												132  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												133  => {
													{{p = ((te))-1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 411;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												134  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												135  => {
													{{match ( act  ) {
																39  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 411;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																40  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_CONSTANT(slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 411;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																41  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_IDENTIFIER(slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 411;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												136  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te - 2);
																	
																	let token = Token::T_LABEL(slice);
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 654;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												137  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												138  => {
													{{te = p+1;
															{}
														}}
													
												}
												139  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												140  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												141  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												142  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 439;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												143  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												144  => {
													{{te = p+1;
															{}
														}}
													
												}
												145  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												146  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												147  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, tm);
																	
																	let token = Token::T_FID(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} p = tm - 1; {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												148  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 439;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												149  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												150  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												151  => {
													{{act = 67;
														}}
													
												}
												152  => {
													{{act = 68;
														}}
													
												}
												153  => {
													{{act = 73;
														}}
													
												}
												154  => {
													{{act = 74;
														}}
													
												}
												155  => {
													{{te = p+1;
															{wip!();
															}
														}}
													
												}
												156  => {
													{{te = p+1;
															{wip!();
															}
														}}
													
												}
												157  => {
													{{te = p+1;
															{{p = p - 1;
																} {p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												158  => {
													{{te = p+1;
															{p = ts - 1; {(self.cs) = 508;
																}}
														}}
													
												}
												159  => {
													{{te = p+1;
															{p = tm - 1; {(self.cs) = 669;
																}}
														}}
													
												}
												160  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 669;
																}}
														}}
													
												}
												161  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												162  => {
													{{te = p+1;
															{}
														}}
													
												}
												163  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN_ARG;
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												164  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN2;
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												165  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LBRACK;
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												166  => {
													{{te = p;
															p = p - 1;
															{wip!();
															}
														}}
													
												}
												167  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												168  => {
													{{te = p;
															p = p - 1;
															{wip!();
															}
														}}
													
												}
												169  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												170  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 669;
																}}
														}}
													
												}
												171  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												172  => {
													{{te = p;
															p = p - 1;
															{{(self.cs) = 669;
																}}
														}}
													
												}
												173  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												174  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												175  => {
													{{p = ((te))-1;
														}}
													
												}
												176  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												177  => {
													{{match ( act  ) {
																67  => {
																	p = ((te))-1;
																	{wip!();
																	}
																	
																}
																68  => {
																	p = ((te))-1;
																	{wip!();
																	}
																	
																}
																73  => {
																	p = ((te))-1;
																	{p = ts - 1;
																		{(self.cs) = 669;
																		}}
																	
																}
																_ => {
																	p = ((te))-1;
																	
																}
																
															}
														}
													}
													
												}
												178  => {
													{{act = 80;
														}}
													
												}
												179  => {
													{{act = 81;
														}}
													
												}
												180  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 439;
																}}
														}}
													
												}
												181  => {
													{{te = p+1;
															{}
														}}
													
												}
												182  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN_ARG;
																	self.emit(token);
																}
																
																//   if version?(18)
																//     fnext expr_value; fbreak;
																//   else
																//     fnext expr_beg; fbreak;
																//   end
																// NOTE ignored ruby18
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												183  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 439;
																}}
														}}
													
												}
												184  => {
													{{p = ((te))-1;
															{p = ts - 1;
																{(self.cs) = 439;
																}}
														}}
													
												}
												185  => {
													{{match ( act  ) {
																80  => {
																	p = ((te))-1;
																	{if self.cond.is_active() {
																		
																			{
																				let slice = self.current_slice(ts, te);
																				
																				let token = Token::K_DO_COND;
																				self.emit(token);
																			}
																			
																		} else {
																		
																			{
																				let slice = self.current_slice(ts, te);
																				
																				let token = Token::K_DO;
																				self.emit(token);
																			}
																			
																		}
																		{(self.cs) = 661;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																81  => {
																	p = ((te))-1;
																	{p = ts - 1;
																		{(self.cs) = 439;
																		}}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												186  => {
													{{te = p+1;
															{wip!();
																// TODO
																// emit_do(true)
																// fnext expr_value; fbreak;
															}
														}}
													
												}
												187  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												188  => {
													{{te = p+1;
															{}
														}}
													
												}
												189  => {
													{{te = p;
															p = p - 1;
															{wip!();
																// if @lambda_stack.last == @paren_nest
																//   @lambda_stack.pop
																//   emit(:tLAMBEG, '{'.freeze)
																// else
																//   emit(:tLBRACE_ARG, '{'.freeze)
																// end
																// fnext expr_value; fbreak;
															}
														}}
													
												}
												190  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												191  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												192  => {
													{{act = 88;
														}}
													
												}
												193  => {
													{{act = 89;
														}}
													
												}
												194  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												195  => {
													{{te = p+1;
															{}
														}}
													
												}
												196  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1; {(self.cs) = 508;
																}}
														}}
													
												}
												197  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												198  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 669;
																}}
														}}
													
												}
												199  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												200  => {
													{{match ( act  ) {
																88  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 508;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																89  => {
																	p = ((te))-1;
																	{p = ts - 1; {(self.cs) = 508;
																		}}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												201  => {
													{{act = 94;
														}}
													
												}
												202  => {
													{{act = 111;
														}}
													
												}
												203  => {
													{{act = 112;
														}}
													
												}
												204  => {
													{{act = 114;
														}}
													
												}
												205  => {
													{{act = 115;
														}}
													
												}
												206  => {
													{{act = 118;
														}}
													
												}
												207  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, ts + 1);
																	
																	let token = Token::T_UNARY_NUM(slice);
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 669;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												208  => {
													{{te = p+1;
															{wip!();
																// type = delimiter = tok[0].chr
																// fhold; fgoto *push_literal(type, delimiter, @ts);
															}
														}}
													
												}
												209  => {
													{{te = p+1;
															{wip!();
																// type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
																// fgoto *push_literal(type, delimiter, @ts);
															}
														}}
													
												}
												210  => {
													{{te = p+1;
															{let literal_type = self.current_slice(ts, te - 1);
																let literal_delimiter = self.current_slice(te - 1, te);
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												211  => {
													{{te = p+1;
															{{p = p - 1;
																} {p = p - 1;
																}
																
																{
																	let slice = self.current_slice(ts, ts + 1);
																	
																	let token = Token::T_SYMBEG(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 298;
																}}
														}}
													
												}
												212  => {
													{{te = p+1;
															{let literal_type = self.current_slice(ts, te).clone();
																let literal_delimiter = literal_type.chars().last().unwrap().to_string();
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												213  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts + 1, ts + 2);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 669;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												214  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts + 1, te);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 669;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												215  => {
													{{te = p+1;
															{panic!("lexer diagnostic: incomplete_escape");
															}
														}}
													
												}
												216  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION_BEGIN", slice);
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												217  => {
													{{te = p+1;
															{{p = p - 1;
																}
																
																// if version?(18)
																//   ident = tok(@ts, @te - 2)
																// 
																//   emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
																//         ident, @ts, @te - 2)
																//   fhold; # continue as a symbol
																// 
																//   if !@static_env.nil? && @static_env.declared?(ident)
																//     fnext expr_end;
																//   else
																//     fnext *arg_or_cmdarg;
																//   end
																// else
																//   emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
																//   fnext expr_labelarg;
																// end
																
																// NOTE ignored ruby18
																
																{
																	let slice = self.current_slice(ts, te - 2);
																	
																	let token = Token::T_LABEL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 654;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												218  => {
													{{te = p+1;
															{wip!();
																// emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
																// p = ident_te - 1
																
																// if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
																//   fnext expr_endfn;
																// else
																//   fnext expr_cmdarg;
																// end
																// fbreak;
															}
														}}
													
												}
												219  => {
													{{te = p+1;
															{p = ts - 1; {(self.cs) = 669;
																}}
														}}
													
												}
												220  => {
													{{te = p+1;
															{}
														}}
													
												}
												221  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, ts + 1);
																	
																	let token = Token::T_UNARY_NUM(slice);
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 669;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												222  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_STAR;
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												223  => {
													{{te = p;
															p = p - 1;
															{let literal_type = self.current_slice(ts, te - 1);
																let literal_delimiter = self.current_slice(te - 1, te);
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												224  => {
													{{te = p;
															p = p - 1;
															{panic!("lexer diagnostic: string_eof");
															}
														}}
													
												}
												225  => {
													{{te = p;
															p = p - 1;
															{wip!();
																// #    tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/m
																// #
																// #    indent      = !$1.empty? || !$2.empty?
																// #    dedent_body = !$2.empty?
																// #    type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
																// #    delimiter   =  $4
																// #
																// #    if @version >= 24
																// #      if delimiter.count("\n") > 0
																// #        if delimiter.end_with?("\n")
																// #          diagnostic :warning, :heredoc_id_ends_with_nl, nil, range(@ts, @ts + 1)
																// #          delimiter = delimiter.rstrip
																// #        else
																// #          diagnostic :fatal, :heredoc_id_has_newline, nil, range(@ts, @ts + 1)
																// #        end
																// #      end
																// #    end
																// #
																// #    if dedent_body && version?(18, 19, 20, 21, 22)
																// #      emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
																// #      p = @ts + 1
																// #      fnext expr_beg; fbreak;
																// #    else
																// #      fnext *push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body);
																// #
																// #      @herebody_s ||= new_herebody_s
																// #      p = @herebody_s - 1
																// #    end
															}
														}}
													
												}
												226  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts + 1, tm);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																p = tm - 1;
																{(self.cs) = 669;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												227  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts + 1, te);
																	
																	let token = Token::T_SYMBOL(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 669;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												228  => {
													{{te = p;
															p = p - 1;
															{panic!("lexer diagnostic: incomplete_escape");
															}
														}}
													
												}
												229  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 669;
																}}
														}}
													
												}
												230  => {
													{{te = p;
															p = p - 1;
															{if !self.lambda_stack.is_empty() && self.lambda_stack.last().unwrap() == &self.paren_nest {
																	self.lambda_stack.pop();
																	
																	{
																		let slice = self.current_slice(ts, te);
																		
																		let token = Token::T_LAMBEG;
																		self.emit(token);
																	}
																	
																} else {
																
																	{
																		let slice = self.current_slice(ts, te);
																		
																		let token = Token::T_LBRACE;
																		self.emit(token);
																	}
																	
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												231  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LBRACK;
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												232  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LPAREN;
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												233  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION_BEGIN", slice);
																	self.emit(token);
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												234  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1;
																{(self.cs) = 669;
																}}
														}}
													
												}
												235  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																
																// TODO WIP
																// if !@static_env.nil? && @static_env.declared?(tok)
																//   fnext expr_endfn; fbreak;
																// else
																//   fnext *arg_or_cmdarg; fbreak;
																// end
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												236  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												237  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1; {(self.cs) = 669;
																}}
														}}
													
												}
												238  => {
													{{p = ((te))-1;
															{panic!("lexer diagnostic: string_eof");
															}
														}}
													
												}
												239  => {
													{{p = ((te))-1;
															{panic!("lexer diagnostic: incomplete_escape");
															}
														}}
													
												}
												240  => {
													{{p = ((te))-1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																
																// TODO WIP
																// if !@static_env.nil? && @static_env.declared?(tok)
																//   fnext expr_endfn; fbreak;
																// else
																//   fnext *arg_or_cmdarg; fbreak;
																// end
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												241  => {
													{{p = ((te))-1;
															{p = ts - 1; {(self.cs) = 669;
																}}
														}}
													
												}
												242  => {
													{{match ( act  ) {
																94  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, ts + 1);
																			
																			let token = Token::T_UNARY_NUM(slice);
																			self.emit(token);
																		}
																		
																		{p = p - 1;
																		} {(self.cs) = 669;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																111  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("PUNCTUATION_BEGIN", slice);
																			self.emit(token);
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																112  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS_BEGIN", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 661;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																114  => {
																	p = ((te))-1;
																	{p = ts - 1;
																		{(self.cs) = 669;
																		}}
																	
																}
																115  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_IDENTIFIER(slice);
																			self.emit(token);
																		}
																		
																		
																		// TODO WIP
																		// if !@static_env.nil? && @static_env.declared?(tok)
																		//   fnext expr_endfn; fbreak;
																		// else
																		//   fnext *arg_or_cmdarg; fbreak;
																		// end
																		{(self.cs) = (self.arg_or_cmdarg());
																		} {p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																118  => {
																	p = ((te))-1;
																	{p = ts - 1; {(self.cs) = 669;
																		}}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												243  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												244  => {
													{{te = p+1;
															{}
														}}
													
												}
												245  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												246  => {
													{{te = p;
															p = p - 1;
															{wip!();
																// if @in_kwarg
																//   fhold; fgoto expr_end;
																// else
																//   fgoto line_begin;
																// end
															}
														}}
													
												}
												247  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												248  => {
													{{te = p+1;
															{p = ts - 1;
																{(self.cs) = 669;
																}}
														}}
													
												}
												249  => {
													{{te = p+1;
															{let literal = Literal::new(self.current_slice(ts,te), self.current_slice(ts,te), ts, None, false, false, false, Rc::clone(&self.tokens));
																
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												250  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												251  => {
													{{te = p+1;
															{}
														}}
													
												}
												252  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												253  => {
													{{te = p;
															p = p - 1;
															{{(self.cs) = 154;
																}}
														}}
													
												}
												254  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												255  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 508;
																}}
														}}
													
												}
												256  => {
													{{act = 131;
														}}
													
												}
												257  => {
													{{act = 132;
														}}
													
												}
												258  => {
													{{act = 133;
														}}
													
												}
												259  => {
													{{act = 134;
														}}
													
												}
												260  => {
													{{act = 135;
														}}
													
												}
												261  => {
													{{act = 136;
														}}
													
												}
												262  => {
													{{act = 137;
														}}
													
												}
												263  => {
													{{act = 138;
														}}
													
												}
												264  => {
													{{act = 141;
														}}
													
												}
												265  => {
													{{act = 145;
														}}
													
												}
												266  => {
													{{act = 146;
														}}
													
												}
												267  => {
													{{act = 148;
														}}
													
												}
												268  => {
													{{act = 149;
														}}
													
												}
												269  => {
													{{te = p+1;
															{wip!();
															}
														}}
													
												}
												270  => {
													{{te = p+1;
															{wip!();
															}
														}}
													
												}
												271  => {
													{{te = p+1;
															{let literal_type = self.current_slice(ts, te);
																let literal_delimiter = self.current_slice(te - 1, te);
																let literal = Literal::new(literal_type, literal_delimiter, ts, None, false, false, false, Rc::clone(&self.tokens));
																{(self.cs) = (self.push_literal(literal));
																}
															}
														}}
													
												}
												272  => {
													{{te = p+1;
															{p = ts - 1; {stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												273  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 418;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												274  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}}
														}}
													
												}
												275  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}}
														}}
													
												}
												276  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																
																self.cond.lexpop();
																
																// if @version < 24
																//   @cmdarg.lexpop
																// else
																//   @cmdarg.pop
																// end
																// NOTE ignored ruby24-and-below
																self.cmdarg.pop();
																
																// if tok == '}'.freeze || tok == ']'.freeze
																//   if @version >= 25
																//     fnext expr_end;
																//   else
																//     fnext expr_endarg;
																//   end
																// else # )
																//   # fnext expr_endfn; ?
																// end
																// NOTE ignored ruby24-and-below
																match self.current_slice(ts, te).as_ref() {
																	"}" | "]" => {
																		{(self.cs) = 476;
																		}},
																	_ => {}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												277  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te - 1);
																	
																	let token = Token::T_OP_ASGN(slice);
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												278  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_EH;
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												279  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												280  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_SEMI;
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												281  => {
													{{te = p+1;
															{panic!("lexer diagnostic: unexpected char: {}", self.current_slice(ts, te)); // TODO char position
															}
														}}
													
												}
												282  => {
													{{te = p+1;
															{}
														}}
													
												}
												283  => {
													{{te = p;
															p = p - 1;
															{wip!();
															}
														}}
													
												}
												284  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 298;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												285  => {
													{{te = p;
															p = p - 1;
															{wip!();
															}
														}}
													
												}
												286  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												287  => {
													{{te = p;
															p = p - 1;
															{let digits = self.current_slice(self.num_digits_s, self.num_suffix_s);
																
																// if digits.end_with? '_'.freeze
																//   diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
																//               range(@te - 1, @te)
																// elsif digits.empty? && @num_base == 8 && version?(18)
																//   # 1.8 did not raise an error on 0o.
																//   digits = '0'.freeze
																// elsif digits.empty?
																//   diagnostic :error, :empty_numeric
																// elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
																//   invalid_s = @num_digits_s + invalid_idx
																//   diagnostic :error, :invalid_octal, nil,
																//               range(invalid_s, invalid_s + 1)
																// end
																// 
																// if version?(18, 19, 20)
																//   emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
																//   p = @num_suffix_s - 1
																// else
																//   @num_xfrm.call(digits.to_i(@num_base))
																// end
																// fbreak;
																
																let token = Token::T_INTEGER(digits.parse::<isize>().unwrap());
																self.emit(token);
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												288  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												289  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, tm);
																	
																	let token = Token::T_CONSTANT(slice);
																	self.emit(token);
																}
																
																p = tm - 1;
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												290  => {
													{{te = p;
															p = p - 1;
															{p = ts - 1; {stack[(top) as usize]
																	= (self.cs);
																	top += 1;
																	(self.cs) = 293;
																}}
														}}
													
												}
												291  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 418;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												292  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_IDENTIFIER(slice);
																	self.emit(token);
																}
																
																
																// TODO WIP
																// if !@static_env.nil? && @static_env.declared?(tok)
																//   fnext expr_endfn; fbreak;
																// else
																//   fnext *arg_or_cmdarg; fbreak;
																// end
																{(self.cs) = (self.arg_or_cmdarg());
																} {p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												293  => {
													{{te = p;
															p = p - 1;
															{if tm == te {
																	// # Suffix was consumed, e.g. foo!
																	
																	{
																		let slice = self.current_slice(ts, te);
																		
																		let token = Token::T_FID(slice);
																		self.emit(token);
																	}
																	
																} else {
																	// # Suffix was not consumed, e.g. foo!=
																	
																	{
																		let slice = self.current_slice(ts, tm);
																		
																		let token = Token::T_IDENTIFIER(slice);
																		self.emit(token);
																	}
																	
																	p = tm - 1;
																}
																{(self.cs) = 439;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												294  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}}
														}}
													
												}
												295  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 661;
																}}
														}}
													
												}
												296  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												297  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																
																self.cond.lexpop();
																
																// if @version < 24
																//   @cmdarg.lexpop
																// else
																//   @cmdarg.pop
																// end
																// NOTE ignored ruby24-and-below
																self.cmdarg.pop();
																
																// if tok == '}'.freeze || tok == ']'.freeze
																//   if @version >= 25
																//     fnext expr_end;
																//   else
																//     fnext expr_endarg;
																//   end
																// else # )
																//   # fnext expr_endfn; ?
																// end
																// NOTE ignored ruby24-and-below
																match self.current_slice(ts, te).as_ref() {
																	"}" | "]" => {
																		{(self.cs) = 476;
																		}},
																	_ => {}
																}
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												298  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_LBRACK2;
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												299  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																	self.emit(token);
																}
																
																{(self.cs) = 508;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												300  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												301  => {
													{{te = p;
															p = p - 1;
															{{(self.cs) = 833;
																}}
														}}
													
												}
												302  => {
													{{te = p;
															p = p - 1;
															{panic!("lexer diagnostic: unexpected char: {}", self.current_slice(ts, te)); // TODO char position
															}
														}}
													
												}
												303  => {
													{{p = ((te))-1;
															{let digits = self.current_slice(self.num_digits_s, self.num_suffix_s);
																
																// if digits.end_with? '_'.freeze
																//   diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
																//               range(@te - 1, @te)
																// elsif digits.empty? && @num_base == 8 && version?(18)
																//   # 1.8 did not raise an error on 0o.
																//   digits = '0'.freeze
																// elsif digits.empty?
																//   diagnostic :error, :empty_numeric
																// elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
																//   invalid_s = @num_digits_s + invalid_idx
																//   diagnostic :error, :invalid_octal, nil,
																//               range(invalid_s, invalid_s + 1)
																// end
																// 
																// if version?(18, 19, 20)
																//   emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
																//   p = @num_suffix_s - 1
																// else
																//   @num_xfrm.call(digits.to_i(@num_base))
																// end
																// fbreak;
																
																let token = Token::T_INTEGER(digits.parse::<isize>().unwrap());
																self.emit(token);
																
																{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												304  => {
													{{p = ((te))-1;
															{panic!("lexer diagnostic: unexpected char: {}", self.current_slice(ts, te)); // TODO char position
															}
														}}
													
												}
												305  => {
													{{match ( act  ) {
																131  => {
																	p = ((te))-1;
																	{wip!();
																	}
																	
																}
																132  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 298;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																133  => {
																	p = ((te))-1;
																	{wip!();
																	}
																	
																}
																134  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 508;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																135  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 661;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																136  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 484;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																137  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		
																		//   if version?(18) && tok == 'not'.freeze
																		//     fnext expr_beg; fbreak;
																		//   else
																		//     fnext expr_arg; fbreak;
																		//   end
																		// NOTE ignored ruby18
																		{(self.cs) = 439;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																138  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("KEYWORDS", slice);
																			self.emit(token);
																		}
																		
																		{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																141  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_CONSTANT(slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = (self.arg_or_cmdarg());
																		} {p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																145  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			
																			let token = Token::T_IDENTIFIER(slice);
																			self.emit(token);
																		}
																		
																		
																		// TODO WIP
																		// if !@static_env.nil? && @static_env.declared?(tok)
																		//   fnext expr_endfn; fbreak;
																		// else
																		//   fnext *arg_or_cmdarg; fbreak;
																		// end
																		{(self.cs) = (self.arg_or_cmdarg());
																		} {p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																146  => {
																	p = ((te))-1;
																	{if tm == te {
																			// # Suffix was consumed, e.g. foo!
																			
																			{
																				let slice = self.current_slice(ts, te);
																				
																				let token = Token::T_FID(slice);
																				self.emit(token);
																			}
																			
																		} else {
																			// # Suffix was not consumed, e.g. foo!=
																			
																			{
																				let slice = self.current_slice(ts, tm);
																				
																				let token = Token::T_IDENTIFIER(slice);
																				self.emit(token);
																			}
																			
																			p = tm - 1;
																		}
																		{(self.cs) = 439;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																148  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 661;
																		}}
																	
																}
																149  => {
																	p = ((te))-1;
																	{{
																			let slice = self.current_slice(ts, te);
																			let token = self.current_slice_as_token_from_table("PUNCTUATION", slice);
																			self.emit(token);
																		}
																		
																		{(self.cs) = 508;
																		}{p+= 1;
																			_cont = 0;
																		}
																	}
																	
																}
																
																_ => {}
															}
														}
													}
													
												}
												306  => {
													{{te = p+1;
															{p = tm - 1; {(self.cs) = 669;
																}}
														}}
													
												}
												307  => {
													{{te = p+1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_NL;
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 154;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												308  => {
													{{te = p;
															p = p - 1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_NL;
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 154;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												309  => {
													{{p = ((te))-1;
															{{
																	let slice = self.current_slice(ts, te);
																	
																	let token = Token::T_NL;
																	self.emit(token);
																}
																
																{p = p - 1;
																} {(self.cs) = 154;
																}{p+= 1;
																	_cont = 0;
																}
															}
														}}
													
												}
												310  => {
													{{te = p+1;
															{wip!();
																// @eq_begin_s = @ts
																// fgoto line_comment;
															}
														}}
													
												}
												311  => {
													{{te = p+1;
															{p = pe - 3 }
														}}
													
												}
												312  => {
													{{te = p+1;
															{{p = p - 1;
																} {(self.cs) = 661;
																}}
														}}
													
												}
												313  => {
													{{te = p+1;
															{}
														}}
													
												}
												314  => {
													{{te = p;
															p = p - 1;
														}}
													
												}
												315  => {
													{{te = p;
															p = p - 1;
															{wip!();
																// @eq_begin_s = @ts
																// fgoto line_comment;
															}
														}}
													
												}
												316  => {
													{{te = p;
															p = p - 1;
															{{p = p - 1;
																} {(self.cs) = 661;
																}}
														}}
													
												}
												317  => {
													{{p = ((te))-1;
															{{p = p - 1;
																} {(self.cs) = 661;
																}}
														}}
													
												}
												
												_ => {}
											}
											_nacts -= 1;
											_acts += 1;
										}
										
										
									}
									
								}
								_acts = ( _lexer_to_state_actions[((self.cs)) as usize] ) as i32;
								_nacts = ( _lexer_actions[(_acts ) as usize]
								) as u32;
								_acts += 1;
								while ( _nacts > 0  )
								{
									match ( _lexer_actions[(_acts ) as usize]
									) {
										56  => {
											{{ts = 0;
												}}
											
										}
										
										_ => {}
									}
									_nacts -= 1;
									_acts += 1;
								}
								
								
								if ( (self.cs) == 0  ) {
									_cont = 0;
									
								}
								if ( _cont == 1  ) {
									p += 1;
									
								}
							}
							
						}
					}
					
				}
			}
			
		}
		self.p = p;
		self.pe = pe;
		self.ts = ts;
		self.te = te;
		self.tm = tm;
		self.act = act;
		self.stack = stack;
		self.top = top;
		
		explain!("lexer:advance:advanced current state: {}", state_name_from_id(self.cs));
		
		if self.tokens.borrow().is_empty() {
			return None;
		} else {
			return Some(self.tokens.borrow_mut().remove(0));
		}
	}
	
	// TODO CRITICAL utf8 uncompatible
	fn current_slice(&self, ts: i32, te: i32) -> String {
		self.input.chars().skip(ts as usize).take( ( te - ts ) as usize ).collect()
	}
	
	fn current_slice_as_token_from_table(&mut self, table_name: &str, current_slice: String) -> Token {
		match table_name {
		
		
			"PUNCTUATION" => {
				match current_slice.as_ref() {
				
					"=" => { return Token::T_EQL; },
					
					"&" => { return Token::T_AMPER2; },
					
					"|" => { return Token::T_PIPE; },
					
					"!" => { return Token::T_BANG; },
					
					"^" => { return Token::T_CARET; },
					
					"+" => { return Token::T_PLUS; },
					
					"-" => { return Token::T_MINUS; },
					
					"*" => { return Token::T_STAR2; },
					
					"/" => { return Token::T_DIVIDE; },
					
					"%" => { return Token::T_PERCENT; },
					
					"~" => { return Token::T_TILDE; },
					
					"," => { return Token::T_COMMA; },
					
					";" => { return Token::T_SEMI; },
					
					"." => { return Token::T_DOT; },
					
					".." => { return Token::T_DOT2; },
					
					"..." => { return Token::T_DOT3; },
					
					"[" => { return Token::T_LBRACK2; },
					
					"]" => { return Token::T_RBRACK; },
					
					"(" => { return Token::T_LPAREN2; },
					
					")" => { return Token::T_RPAREN; },
					
					"?" => { return Token::T_EH; },
					
					":" => { return Token::T_COLON; },
					
					"&&" => { return Token::T_ANDOP; },
					
					"||" => { return Token::T_OROP; },
					
					"-@" => { return Token::T_UMINUS; },
					
					"+@" => { return Token::T_UPLUS; },
					
					"~@" => { return Token::T_TILDE; },
					
					"**" => { return Token::T_POW; },
					
					"->" => { return Token::T_LAMBDA; },
					
					"=~" => { return Token::T_MATCH; },
					
					"!~" => { return Token::T_NMATCH; },
					
					"==" => { return Token::T_EQ; },
					
					"!=" => { return Token::T_NEQ; },
					
					">" => { return Token::T_GT; },
					
					">>" => { return Token::T_RSHFT; },
					
					">=" => { return Token::T_GEQ; },
					
					"<" => { return Token::T_LT; },
					
					"<<" => { return Token::T_LSHFT; },
					
					"<=" => { return Token::T_LEQ; },
					
					"=>" => { return Token::T_ASSOC; },
					
					"::" => { return Token::T_COLON2; },
					
					"===" => { return Token::T_EQQ; },
					
					"<=>" => { return Token::T_CMP; },
					
					"[]" => { return Token::T_AREF; },
					
					"[]=" => { return Token::T_ASET; },
					
					"{" => { return Token::T_LCURLY; },
					
					"}" => { return Token::T_RCURLY; },
					
					"`" => { return Token::T_BACK_REF2; },
					
					"!@" => { return Token::T_BANG; },
					
					"&." => { return Token::T_ANDDOT; },
					
					_ => { panic!("unreachable! no tokens in table PUNCTUATION"); }
				}
			},
			
			"PUNCTUATION_BEGIN" => {
				match current_slice.as_ref() {
				
					"&" => { return Token::T_AMPER; },
					
					"*" => { return Token::T_STAR; },
					
					"**" => { return Token::T_DSTAR; },
					
					"+" => { return Token::T_UPLUS; },
					
					"-" => { return Token::T_UMINUS; },
					
					"::" => { return Token::T_COLON3; },
					
					"(" => { return Token::T_LPAREN; },
					
					"{" => { return Token::T_LBRACE; },
					
					"[" => { return Token::T_LBRACK; },
					
					_ => { panic!("unreachable! no tokens in table PUNCTUATION_BEGIN"); }
				}
			},
			
			"KEYWORDS" => {
				match current_slice.as_ref() {
				
					"if" => { return Token::K_IF_MOD; },
					
					"unless" => { return Token::K_UNLESS_MOD; },
					
					"while" => { return Token::K_WHILE_MOD; },
					
					"until" => { return Token::K_UNTIL_MOD; },
					
					"rescue" => { return Token::K_RESCUE_MOD; },
					
					"defined?" => { return Token::K_DEFINED; },
					
					"BEGIN" => { return Token::K_LBEGIN; },
					
					"END" => { return Token::K_LEND; },
					
					"class" => { return Token::K_CLASS; },
					
					"module" => { return Token::K_MODULE; },
					
					"def" => { return Token::K_DEF; },
					
					"undef" => { return Token::K_UNDEF; },
					
					"begin" => { return Token::K_BEGIN; },
					
					"end" => { return Token::K_END; },
					
					"then" => { return Token::K_THEN; },
					
					"elsif" => { return Token::K_ELSIF; },
					
					"else" => { return Token::K_ELSE; },
					
					"ensure" => { return Token::K_ENSURE; },
					
					"case" => { return Token::K_CASE; },
					
					"when" => { return Token::K_WHEN; },
					
					"for" => { return Token::K_FOR; },
					
					"break" => { return Token::K_BREAK; },
					
					"next" => { return Token::K_NEXT; },
					
					"redo" => { return Token::K_REDO; },
					
					"retry" => { return Token::K_RETRY; },
					
					"in" => { return Token::K_IN; },
					
					"do" => { return Token::K_DO; },
					
					"return" => { return Token::K_RETURN; },
					
					"yield" => { return Token::K_YIELD; },
					
					"super" => { return Token::K_SUPER; },
					
					"self" => { return Token::K_SELF; },
					
					"nil" => { return Token::K_NIL; },
					
					"true" => { return Token::K_TRUE; },
					
					"false" => { return Token::K_FALSE; },
					
					"and" => { return Token::K_AND; },
					
					"or" => { return Token::K_OR; },
					
					"not" => { return Token::K_NOT; },
					
					"alias" => { return Token::K_ALIAS; },
					
					"__FILE__" => { return Token::K__FILE__; },
					
					"__LINE__" => { return Token::K__LINE__; },
					
					"__ENCODING__" => { return Token::K__ENCODING__; },
					
					_ => { panic!("unreachable! no tokens in table KEYWORDS"); }
				}
			},
			
			"KEYWORDS_BEGIN" => {
				match current_slice.as_ref() {
				
					"if" => { return Token::K_IF; },
					
					"unless" => { return Token::K_UNLESS; },
					
					"while" => { return Token::K_WHILE; },
					
					"until" => { return Token::K_UNTIL; },
					
					"rescue" => { return Token::K_RESCUE; },
					
					"defined?" => { return Token::K_DEFINED; },
					
					"BEGIN" => { return Token::K_LBEGIN; },
					
					"END" => { return Token::K_LEND; },
					
					"class" => { return Token::K_CLASS; },
					
					"module" => { return Token::K_MODULE; },
					
					"def" => { return Token::K_DEF; },
					
					"undef" => { return Token::K_UNDEF; },
					
					"begin" => { return Token::K_BEGIN; },
					
					"end" => { return Token::K_END; },
					
					"then" => { return Token::K_THEN; },
					
					"elsif" => { return Token::K_ELSIF; },
					
					"else" => { return Token::K_ELSE; },
					
					"ensure" => { return Token::K_ENSURE; },
					
					"case" => { return Token::K_CASE; },
					
					"when" => { return Token::K_WHEN; },
					
					"for" => { return Token::K_FOR; },
					
					"break" => { return Token::K_BREAK; },
					
					"next" => { return Token::K_NEXT; },
					
					"redo" => { return Token::K_REDO; },
					
					"retry" => { return Token::K_RETRY; },
					
					"in" => { return Token::K_IN; },
					
					"do" => { return Token::K_DO; },
					
					"return" => { return Token::K_RETURN; },
					
					"yield" => { return Token::K_YIELD; },
					
					"super" => { return Token::K_SUPER; },
					
					"self" => { return Token::K_SELF; },
					
					"nil" => { return Token::K_NIL; },
					
					"true" => { return Token::K_TRUE; },
					
					"false" => { return Token::K_FALSE; },
					
					"and" => { return Token::K_AND; },
					
					"or" => { return Token::K_OR; },
					
					"not" => { return Token::K_NOT; },
					
					"alias" => { return Token::K_ALIAS; },
					
					"__FILE__" => { return Token::K__FILE__; },
					
					"__LINE__" => { return Token::K__LINE__; },
					
					"__ENCODING__" => { return Token::K__ENCODING__; },
					
					_ => { panic!("unreachable! no tokens in table KEYWORDS_BEGIN"); }
				}
			},
			
			_ => { panic!("unreachable! no such table"); }
		}
	}
	
	fn emit(&mut self, token: Token) {
		explain!("lexer.emit: {:?}", token);
		self.tokens.borrow_mut().push(token);
	}
	
	// TODO NOTE
	fn arg_or_cmdarg(&self) -> i32 {
		if self.command_state { lexer_en_expr_cmdarg } else { lexer_en_expr_arg }
	}
	
	pub fn set_state(&mut self, state_name: &str) {
		explain!("lexer.set_state: {}", state_name);
		
		self.cs = state_id_from_name(state_name);
	}
}
